#lang racket

(module+ test
  (require "x64-wrapper.rkt")

  (require rackunit)

  (define PAREN_X64_V1_YES_6 '(begin (set! rax 0) (set! rax (+ rax 42))))
  (define PAREN_X64_V1_YES_7 '(begin (set! rax 170679)
                                     (set! rdi rax)
                                     (set! rdi (+ rdi rdi))
                                     (set! rsp rdi)
                                     (set! rsp (* rsp rsp))
                                     (set! rbx 8991)))
  (define PAREN_X64_V1_YES_8 '(begin))
  (define PAREN_X64_V1_YES_9 '(begin (set! rax 15)))
  (define PAREN_X64_V1_YES_10 '(begin (set! r8 1000) (set! r9 1005) (set! r8 r9)))
  (define PAREN_X64_V1_YES_11 `(begin (set! r8 ,(sub1 (expt 2 32))) (set! r8 (+ r8 1))))
  (define PAREN_X64_V1_YES_12 `(begin (set! r9 ,(- 0 (expt 2 32))) (set! r9 (* r9 0))))
  (define PAREN_X64_V1_YES_13 `(begin (set! r10 0) (set! r11 ,(sub1 (expt 2 32))) (set! r10 (+ r10 r11))))
  (define PAREN_X64_V1_YES_14 `(begin (set! r12 2) (set! r13 ,(expt 2 30)) (set! r12 (* r12 r13))))

  (test-case
   "generate-x64"
   (check-equal? (generate-x64 PAREN_X64_V1_YES_6) "mov rax, 0\nadd rax, 42\n")
   (check-equal? (generate-x64 PAREN_X64_V1_YES_7)
                 "mov rax, 170679\nmov rdi, rax\nadd rdi, rdi\nmov rsp, rdi\nimul rsp, rsp\nmov rbx, 8991\n")
   (check-equal? (generate-x64 PAREN_X64_V1_YES_8) "")
   (check-equal? (generate-x64 PAREN_X64_V1_YES_9) "mov rax, 15\n")
   (check-equal? (generate-x64 PAREN_X64_V1_YES_10) "mov r8, 1000\nmov r9, 1005\nmov r8, r9\n")
   (check-equal? (generate-x64 PAREN_X64_V1_YES_11)
                 "mov r8, 4294967295\nadd r8, 1\n")
   (check-equal? (generate-x64 PAREN_X64_V1_YES_12)
                 "mov r9, -4294967296\nimul r9, 0\n")
   (check-equal? (generate-x64 PAREN_X64_V1_YES_13)
                 "mov r10, 0\nmov r11, 4294967295\nadd r10, r11\n")
   (check-equal? (generate-x64 PAREN_X64_V1_YES_14)
                 "mov r12, 2\nmov r13, 1073741824\nimul r12, r13\n")
   (check-equal? (generate-x64 '(begin (set! rax 42))) "mov rax, 42\n")
   (check-equal? (generate-x64 '(begin (set! rax 42) (set! rax (+ rax 0)))) "mov rax, 42\nadd rax, 0\n")
   (check-equal? (generate-x64 '(begin (set! (rbp - 0) 0)
                                       (set! (rbp - 8) 42)
                                       (set! rax (rbp - 0))
                                       (set! rax (+ rax (rbp - 8)))))
                 "mov QWORD [rbp - 0], 0\nmov QWORD [rbp - 8], 42\nmov rax, QWORD [rbp - 0]\nadd rax, QWORD [rbp - 8]\n")
   (check-equal? (generate-x64 '(begin (set! rax 0) (set! rbx 0) (set! r9 42) (set! rax (+ rax r9))))
                 "mov rax, 0\nmov rbx, 0\nmov r9, 42\nadd rax, r9\n")
   (check-equal? (generate-x64 '(begin (jump rax)))
                 "jmp rax\n")
   (check-equal? (generate-x64 '(begin (jump-if > L.start.1)))
                 "jg L.start.1\n")
   (check-equal? (generate-x64 '(begin (with-label L.start.1 (jump L.start.1))))
                 "L.start.1:\njmp L.start.1\n")
   (check-equal? (generate-x64 '(begin (compare rax 2)))
                 "cmp rax, 2\n")
   (check-equal? (generate-x64 '(begin 
                                  (set! rbx 10)
                                  (compare rbx 0)
                                  (with-label L.start.1 (jump-if = L.end.1))
                                  (set! rbx (+ rbx -1))
                                  (jump L.start.1)
                                  (with-label L.end.1 (set! rax rbx))))
                               "mov rbx, 10\ncmp rbx, 0\nL.start.1:\nje L.end.1\nadd rbx, -1\njmp L.start.1\nL.end.1:\nmov rax, rbx\n")))
