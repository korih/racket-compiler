#lang racket

(require
  rackunit
  cpsc411/compiler-lib
  cpsc411/graph-lib
  cpsc411/langs/v7)

(provide assign-call-undead-variables)

;; asm-lang-v7/conflicts -> asm-lang-v7/pre-framed
;; Compiles Asm-pred-lang-v7/conflicts to Asm-pred-lang-v7/pre-framed by
;; pre-assigning all variables in the call-undead sets to frame variables
(define/contract (assign-call-undead-variables p)
  (-> asm-pred-lang-v7/conflicts? asm-pred-lang-v7/pre-framed?)

  ;; func is `(define ,label ,info ,tail)
  ;; interp. a function definition

  ;; (List-of asm-lang-v7/conflicts.loc) (Graph-of asm-lang-v7/conflicts.loc) (List-of (list aloc fvar)) -> (List-of (list aloc fvar))
  ;; interp. recursively assigns each variable in call-undead-set to the first
  ;; compatible frame variable without conflicts
  (define (graph-colouring call-undead-set conflicts-graph assignments)
    (if (null? call-undead-set)
        assignments
        (let* ([x (car call-undead-set)]
               [rest (cdr call-undead-set)]
               [assignments^ (graph-colouring rest conflicts-graph assignments)]
               ;; Collect vars assigned to each frame variable
               [frame-assignments (foldl (lambda (pair acc)
                                           (let* ([var (car pair)]
                                                  [fv (cadr pair)]
                                                  [existing (assoc fv acc)])
                                             (if existing
                                                 (cons (list fv (cons var (cadr existing))) (remove existing acc))
                                                 (cons (list fv (list var)) acc))))
                                         '()
                                         assignments^)]
               [conflict-vars (get-neighbors conflicts-graph x)])

          ;; Recursively find the first valid frame slot
          (define (find-fvar i)
            (let* ([candidate-fv (make-fvar i)]
                   [assigned-vars (let ([entry (assoc candidate-fv frame-assignments)])
                                    (if entry (cadr entry) '()))]
                   [conflict? (ormap (lambda (v) (member v conflict-vars)) assigned-vars)])
              (if conflict?
                  (find-fvar (add1 i))
                  candidate-fv)))

          ;; Assign x to the first safe frame var
          (cons (list x (find-fvar 0)) assignments^))))

  ;; asm-lang-v7/conflicts.info -> asm-lang-v7/pre-framed.info
  (define (assign-call-undead-variables-info info)
    (define assignments (graph-colouring (info-ref info 'call-undead) (info-ref info 'conflicts) '()))
    (define locals
      (let ([local-variables (reverse (info-ref info 'locals))])
        (remove* (map car assignments) local-variables)))
    (info-set (info-set info 'locals locals) 'assignment assignments))

  ;; func -> func
  (define (assign-call-undead-variables-func func)
    (match func
      [`(define ,label ,info ,tail)
       `(define ,label ,(assign-call-undead-variables-info info) ,tail)]))

  (match p
    [`(module ,info ,funcs ... ,tail)
     `(module ,(assign-call-undead-variables-info info) ,@(map assign-call-undead-variables-func funcs) ,tail)]))

(module+ test
  (require rackunit)
  (check-equal? (assign-call-undead-variables '(module
                                                   ((new-frames ())
                                                    (locals ())
                                                    (call-undead ())
                                                    (conflicts ()))
                                                 (jump done)))
                '(module
                     ((new-frames ())
                      (locals ())
                      (call-undead ())
                      (conflicts ())
                      (assignment ()))
                   (jump done)))
  (check-equal? (assign-call-undead-variables '(module ((new-frames (()))
                                                        (locals (z.3 tmp-ra.1 x.1 y.2))
                                                        (undead-out
                                                         ((rdi rsi tmp-ra.1 rbp)
                                                          (rsi x.1 tmp-ra.1 rbp)
                                                          (y.2 x.1 tmp-ra.1 rbp)
                                                          ((y.2 x.1 tmp-ra.1 rbp)
                                                           ((tmp-ra.1 rax rbp) (rax rbp))
                                                           (((rax tmp-ra.1 rbp)
                                                             ((y.2 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp)))
                                                            (z.3 tmp-ra.1 rbp)
                                                            (tmp-ra.1 rax rbp)
                                                            (rax rbp)))))
                                                        (call-undead (tmp-ra.1))
                                                        (conflicts
                                                         ((y.2 (rbp tmp-ra.1 x.1 rsi))
                                                          (x.1 (y.2 rbp tmp-ra.1 rsi))
                                                          (tmp-ra.1 (y.2 x.1 rbp rsi rdi rax z.3))
                                                          (z.3 (rbp tmp-ra.1))
                                                          (rsi (x.1 tmp-ra.1 r15 rdi rbp y.2))
                                                          (rbp (y.2 x.1 tmp-ra.1 rax z.3 r15 rdi rsi))
                                                          (rdi (tmp-ra.1 r15 rbp rsi))
                                                          (r15 (rbp rdi rsi))
                                                          (rax (rbp tmp-ra.1)))))
                                                 (begin
                                                   (set! tmp-ra.1 r15)
                                                   (set! x.1 rdi)
                                                   (set! y.2 rsi)
                                                   (if (< y.2 x.1)
                                                       (begin (set! rax x.1) (jump tmp-ra.1 rbp rax))
                                                       (begin
                                                         (return-point L.rp.1
                                                                       (begin
                                                                         (set! rsi x.1)
                                                                         (set! rdi y.2)
                                                                         (set! r15 L.rp.1)
                                                                         (jump L.swap.1 rbp r15 rdi rsi)))
                                                         (set! z.3 rax)
                                                         (set! rax z.3)
                                                         (jump tmp-ra.1 rbp rax))))))
                '(module
                     ((new-frames (()))
                      (locals (y.2 x.1 z.3))
                      (undead-out
                       ((rdi rsi tmp-ra.1 rbp)
                        (rsi x.1 tmp-ra.1 rbp)
                        (y.2 x.1 tmp-ra.1 rbp)
                        ((y.2 x.1 tmp-ra.1 rbp)
                         ((tmp-ra.1 rax rbp) (rax rbp))
                         (((rax tmp-ra.1 rbp)
                           ((y.2 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp)))
                          (z.3 tmp-ra.1 rbp)
                          (tmp-ra.1 rax rbp)
                          (rax rbp)))))
                      (call-undead (tmp-ra.1))
                      (conflicts
                       ((y.2 (rbp tmp-ra.1 x.1 rsi))
                        (x.1 (y.2 rbp tmp-ra.1 rsi))
                        (tmp-ra.1 (y.2 x.1 rbp rsi rdi rax z.3))
                        (z.3 (rbp tmp-ra.1))
                        (rsi (x.1 tmp-ra.1 r15 rdi rbp y.2))
                        (rbp (y.2 x.1 tmp-ra.1 rax z.3 r15 rdi rsi))
                        (rdi (tmp-ra.1 r15 rbp rsi))
                        (r15 (rbp rdi rsi))
                        (rax (rbp tmp-ra.1))))
                      (assignment ((tmp-ra.1 fv0))))
                   (begin
                     (set! tmp-ra.1 r15)
                     (set! x.1 rdi)
                     (set! y.2 rsi)
                     (if (< y.2 x.1)
                         (begin (set! rax x.1) (jump tmp-ra.1 rbp rax))
                         (begin
                           (return-point L.rp.1
                                         (begin
                                           (set! rsi x.1)
                                           (set! rdi y.2)
                                           (set! r15 L.rp.1)
                                           (jump L.swap.1 rbp r15 rdi rsi)))
                           (set! z.3 rax)
                           (set! rax z.3)
                           (jump tmp-ra.1 rbp rax))))))
  (check-equal? (assign-call-undead-variables '(module
                                                   ((new-frames ())
                                                    (locals (tmp-ra.2))
                                                    (call-undead ())
                                                    (undead-out
                                                     ((tmp-ra.2 rbp)
                                                      (tmp-ra.2 rsi rbp)
                                                      (tmp-ra.2 rsi rdi rbp)
                                                      (rsi rdi r15 rbp)
                                                      (rsi rdi r15 rbp)))
                                                    (conflicts
                                                     ((tmp-ra.2 (rdi rsi rbp))
                                                      (rbp (r15 rdi rsi tmp-ra.2))
                                                      (rsi (r15 rdi rbp tmp-ra.2))
                                                      (rdi (r15 rbp rsi tmp-ra.2))
                                                      (r15 (rbp rdi rsi)))))
                                                 (define L.swap.1
                                                   ((new-frames (()))
                                                    (locals (z.3 tmp-ra.1 x.1 y.2))
                                                    (undead-out
                                                     ((rdi rsi tmp-ra.1 rbp)
                                                      (rsi x.1 tmp-ra.1 rbp)
                                                      (y.2 x.1 tmp-ra.1 rbp)
                                                      ((y.2 x.1 tmp-ra.1 rbp)
                                                       ((tmp-ra.1 rax rbp) (rax rbp))
                                                       (((rax tmp-ra.1 rbp)
                                                         ((y.2 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp)))
                                                        (z.3 tmp-ra.1 rbp)
                                                        (tmp-ra.1 rax rbp)
                                                        (rax rbp)))))
                                                    (call-undead (tmp-ra.1))
                                                    (conflicts
                                                     ((y.2 (rbp tmp-ra.1 x.1 rsi))
                                                      (x.1 (y.2 rbp tmp-ra.1 rsi))
                                                      (tmp-ra.1 (y.2 x.1 rbp rsi rdi rax z.3))
                                                      (z.3 (rbp tmp-ra.1))
                                                      (rsi (x.1 tmp-ra.1 r15 rdi rbp y.2))
                                                      (rbp (y.2 x.1 tmp-ra.1 rax z.3 r15 rdi rsi))
                                                      (rdi (tmp-ra.1 r15 rbp rsi))
                                                      (r15 (rbp rdi rsi))
                                                      (rax (rbp tmp-ra.1)))))
                                                   (begin
                                                     (set! tmp-ra.1 r15)
                                                     (set! x.1 rdi)
                                                     (set! y.2 rsi)
                                                     (if (< y.2 x.1)
                                                         (begin (set! rax x.1) (jump tmp-ra.1 rbp rax))
                                                         (begin
                                                           (return-point L.rp.1
                                                                         (begin
                                                                           (set! rsi x.1)
                                                                           (set! rdi y.2)
                                                                           (set! r15 L.rp.1)
                                                                           (jump L.swap.1 rbp r15 rdi rsi)))
                                                           (set! z.3 rax)
                                                           (set! rax z.3)
                                                           (jump tmp-ra.1 rbp rax)))))
                                                 (begin
                                                   (set! tmp-ra.2 r15)
                                                   (set! rsi 2)
                                                   (set! rdi 1)
                                                   (set! r15 tmp-ra.2)
                                                   (jump L.swap.1 rbp r15 rdi rsi))))
                '(module
                     ((new-frames ())
                      (locals (tmp-ra.2))
                      (call-undead ())
                      (undead-out
                       ((tmp-ra.2 rbp)
                        (tmp-ra.2 rsi rbp)
                        (tmp-ra.2 rsi rdi rbp)
                        (rsi rdi r15 rbp)
                        (rsi rdi r15 rbp)))
                      (conflicts
                       ((tmp-ra.2 (rdi rsi rbp))
                        (rbp (r15 rdi rsi tmp-ra.2))
                        (rsi (r15 rdi rbp tmp-ra.2))
                        (rdi (r15 rbp rsi tmp-ra.2))
                        (r15 (rbp rdi rsi))))
                      (assignment ()))
                   (define L.swap.1
                     ((new-frames (()))
                      (locals (y.2 x.1 z.3))
                      (undead-out
                       ((rdi rsi tmp-ra.1 rbp)
                        (rsi x.1 tmp-ra.1 rbp)
                        (y.2 x.1 tmp-ra.1 rbp)
                        ((y.2 x.1 tmp-ra.1 rbp)
                         ((tmp-ra.1 rax rbp) (rax rbp))
                         (((rax tmp-ra.1 rbp)
                           ((y.2 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp)))
                          (z.3 tmp-ra.1 rbp)
                          (tmp-ra.1 rax rbp)
                          (rax rbp)))))
                      (call-undead (tmp-ra.1))
                      (conflicts
                       ((y.2 (rbp tmp-ra.1 x.1 rsi))
                        (x.1 (y.2 rbp tmp-ra.1 rsi))
                        (tmp-ra.1 (y.2 x.1 rbp rsi rdi rax z.3))
                        (z.3 (rbp tmp-ra.1))
                        (rsi (x.1 tmp-ra.1 r15 rdi rbp y.2))
                        (rbp (y.2 x.1 tmp-ra.1 rax z.3 r15 rdi rsi))
                        (rdi (tmp-ra.1 r15 rbp rsi))
                        (r15 (rbp rdi rsi))
                        (rax (rbp tmp-ra.1))))
                      (assignment ((tmp-ra.1 fv0))))
                     (begin
                       (set! tmp-ra.1 r15)
                       (set! x.1 rdi)
                       (set! y.2 rsi)
                       (if (< y.2 x.1)
                           (begin (set! rax x.1) (jump tmp-ra.1 rbp rax))
                           (begin
                             (return-point L.rp.1
                                           (begin
                                             (set! rsi x.1)
                                             (set! rdi y.2)
                                             (set! r15 L.rp.1)
                                             (jump L.swap.1 rbp r15 rdi rsi)))
                             (set! z.3 rax)
                             (set! rax z.3)
                             (jump tmp-ra.1 rbp rax)))))
                   (begin
                     (set! tmp-ra.2 r15)
                     (set! rsi 2)
                     (set! rdi 1)
                     (set! r15 tmp-ra.2)
                     (jump L.swap.1 rbp r15 rdi rsi))))

  (check-equal? (assign-call-undead-variables
                 '(module
                      ((locals (x.1 y.2))
                       (call-undead ())
                       (new-frames (()))
                       (undead-out ((x.1 r15)
                                    (x.1 y.2 r15)
                                    ((x.1 y.2 r15)
                                     ((r15) ())
                                     ((r15) ()))))
                       (conflicts ((y.2 (r15))
                                   (x.1 (r15))
                                   (r15 (rax y.2 x.1))
                                   (rax (r15)))))
                    (begin
                      (set! x.1 3)
                      (set! y.2 x.1)
                      (if (> y.2 x.1)
                          (begin (set! rax x.1) (jump r15))
                          (begin (set! rax y.2) (jump r15))))))
                '(module
                     ((locals (y.2 x.1))
                      (call-undead ())
                      (new-frames (()))
                      (undead-out ((x.1 r15) (x.1 y.2 r15) ((x.1 y.2 r15) ((r15) ()) ((r15) ()))))
                      (conflicts ((y.2 (r15)) (x.1 (r15)) (r15 (rax y.2 x.1)) (rax (r15))))
                      (assignment ()))
                   (begin
                     (set! x.1 3)
                     (set! y.2 x.1)
                     (if (> y.2 x.1)
                         (begin (set! rax x.1) (jump r15))
                         (begin (set! rax y.2) (jump r15))))))
  (check-equal? (assign-call-undead-variables '(module
                                                   ((new-frames ())
                                                    (locals (tmp-ra.2))
                                                    (call-undead ())
                                                    (undead-out
                                                     ((tmp-ra.2 rbp)
                                                      (tmp-ra.2 rsi rbp)
                                                      (tmp-ra.2 rsi rdi rbp)
                                                      (rsi rdi r15 rbp)
                                                      (rsi rdi r15 rbp)))
                                                    (conflicts
                                                     ((tmp-ra.2 (rdi rsi rbp))
                                                      (rbp (r15 rdi rsi tmp-ra.2))
                                                      (rsi (r15 rdi rbp tmp-ra.2))
                                                      (rdi (r15 rbp rsi tmp-ra.2))
                                                      (r15 (rbp rdi rsi)))))
                                                 (define L.swap.1
                                                   ((new-frames (()))
                                                    (locals (z.3 tmp-ra.1 x.1 y.2))
                                                    (undead-out
                                                     ((rdi rsi tmp-ra.1 rbp)
                                                      (rsi x.1 tmp-ra.1 rbp)
                                                      (y.2 x.1 tmp-ra.1 rbp)
                                                      ((y.2 x.1 tmp-ra.1 rbp)
                                                       ((tmp-ra.1 rax rbp) (rax rbp))
                                                       (((rax tmp-ra.1 rbp)
                                                         ((y.2 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp)))
                                                        (z.3 tmp-ra.1 rbp)
                                                        (tmp-ra.1 rax rbp)
                                                        (rax rbp)))))
                                                    (call-undead (tmp-ra.1))
                                                    (conflicts
                                                     ((y.2 (rbp tmp-ra.1 x.1 rsi))
                                                      (x.1 (y.2 rbp tmp-ra.1 rsi))
                                                      (tmp-ra.1 (y.2 x.1 rbp rsi rdi rax z.3))
                                                      (z.3 (rbp tmp-ra.1))
                                                      (rsi (x.1 tmp-ra.1 r15 rdi rbp y.2))
                                                      (rbp (y.2 x.1 tmp-ra.1 rax z.3 r15 rdi rsi))
                                                      (rdi (tmp-ra.1 r15 rbp rsi))
                                                      (r15 (rbp rdi rsi))
                                                      (rax (rbp tmp-ra.1)))))
                                                   (begin
                                                     (set! tmp-ra.1 r15)
                                                     (set! x.1 rdi)
                                                     (set! y.2 rsi)
                                                     (if (< y.2 x.1)
                                                         (begin (set! rax x.1) (jump tmp-ra.1 rbp rax))
                                                         (begin
                                                           (return-point L.rp.1
                                                                         (begin
                                                                           (set! rsi x.1)
                                                                           (set! rdi y.2)
                                                                           (set! r15 L.rp.1)
                                                                           (jump L.swap.1 rbp r15 rdi rsi)))
                                                           (set! z.3 rax)
                                                           (set! rax z.3)
                                                           (jump tmp-ra.1 rbp rax)))))
                                                 (begin
                                                   (set! tmp-ra.2 r15)
                                                   (set! rsi 2)
                                                   (set! rdi 1)
                                                   (set! r15 tmp-ra.2)
                                                   (jump L.swap.1 rbp r15 rdi rsi))))
                '(module
                     ((new-frames ())
                      (locals (tmp-ra.2))
                      (call-undead ())
                      (undead-out
                       ((tmp-ra.2 rbp)
                        (tmp-ra.2 rsi rbp)
                        (tmp-ra.2 rsi rdi rbp)
                        (rsi rdi r15 rbp)
                        (rsi rdi r15 rbp)))
                      (conflicts
                       ((tmp-ra.2 (rdi rsi rbp))
                        (rbp (r15 rdi rsi tmp-ra.2))
                        (rsi (r15 rdi rbp tmp-ra.2))
                        (rdi (r15 rbp rsi tmp-ra.2))
                        (r15 (rbp rdi rsi))))
                      (assignment ()))
                   (define L.swap.1
                     ((new-frames (()))
                      (locals (y.2 x.1 z.3))
                      (undead-out
                       ((rdi rsi tmp-ra.1 rbp)
                        (rsi x.1 tmp-ra.1 rbp)
                        (y.2 x.1 tmp-ra.1 rbp)
                        ((y.2 x.1 tmp-ra.1 rbp)
                         ((tmp-ra.1 rax rbp) (rax rbp))
                         (((rax tmp-ra.1 rbp)
                           ((y.2 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp)))
                          (z.3 tmp-ra.1 rbp)
                          (tmp-ra.1 rax rbp)
                          (rax rbp)))))
                      (call-undead (tmp-ra.1))
                      (conflicts
                       ((y.2 (rbp tmp-ra.1 x.1 rsi))
                        (x.1 (y.2 rbp tmp-ra.1 rsi))
                        (tmp-ra.1 (y.2 x.1 rbp rsi rdi rax z.3))
                        (z.3 (rbp tmp-ra.1))
                        (rsi (x.1 tmp-ra.1 r15 rdi rbp y.2))
                        (rbp (y.2 x.1 tmp-ra.1 rax z.3 r15 rdi rsi))
                        (rdi (tmp-ra.1 r15 rbp rsi))
                        (r15 (rbp rdi rsi))
                        (rax (rbp tmp-ra.1))))
                      (assignment ((tmp-ra.1 fv0))))
                     (begin
                       (set! tmp-ra.1 r15)
                       (set! x.1 rdi)
                       (set! y.2 rsi)
                       (if (< y.2 x.1)
                           (begin (set! rax x.1) (jump tmp-ra.1 rbp rax))
                           (begin
                             (return-point L.rp.1
                                           (begin
                                             (set! rsi x.1)
                                             (set! rdi y.2)
                                             (set! r15 L.rp.1)
                                             (jump L.swap.1 rbp r15 rdi rsi)))
                             (set! z.3 rax)
                             (set! rax z.3)
                             (jump tmp-ra.1 rbp rax)))))
                   (begin
                     (set! tmp-ra.2 r15)
                     (set! rsi 2)
                     (set! rdi 1)
                     (set! r15 tmp-ra.2)
                     (jump L.swap.1 rbp r15 rdi rsi))))
  (check-equal? (assign-call-undead-variables '(module
                                                   ((new-frames ())
                                                    (locals (x.3 tmp-ra.2 x.2))
                                                    (call-undead ())
                                                    (undead-out
                                                     ((tmp-ra.2 rbp)
                                                      (x.2 tmp-ra.2 rbp)
                                                      (((x.3 x.2 tmp-ra.2 rbp) (x.2 tmp-ra.2 rbp))
                                                       ((tmp-ra.2 rdi rbp) (rdi r15 rbp) (rbp r15 rdi))
                                                       ((tmp-ra.2 rdi rbp) (rdi r15 rbp) (rbp r15 rdi)))))
                                                    (conflicts
                                                     ((x.2 (x.3 tmp-ra.2 rbp))
                                                      (tmp-ra.2 (rdi x.3 x.2 rbp))
                                                      (x.3 (x.2 tmp-ra.2 rbp))
                                                      (rbp (r15 rdi x.3 x.2 tmp-ra.2))
                                                      (rdi (r15 tmp-ra.2 rbp))
                                                      (r15 (rdi rbp)))))
                                                 (define L.f.1
                                                   ((new-frames ())
                                                    (locals (tmp-ra.1 b.1 y.1 x.1 z.1 a.1))
                                                    (undead-out
                                                     ((rdi rbp tmp-ra.1)
                                                      (x.1 rbp tmp-ra.1)
                                                      (y.1 x.1 rbp tmp-ra.1)
                                                      (y.1 z.1 x.1 rbp tmp-ra.1)
                                                      (a.1 z.1 x.1 rbp tmp-ra.1)
                                                      (z.1 x.1 a.1 rbp tmp-ra.1)
                                                      (x.1 b.1 a.1 rbp tmp-ra.1)
                                                      (b.1 a.1 rbp tmp-ra.1)
                                                      (a.1 rbp tmp-ra.1)
                                                      (rax rbp tmp-ra.1)
                                                      (rax rbp tmp-ra.1)
                                                      (rbp rax)))
                                                    (call-undead ())
                                                    (conflicts
                                                     ((a.1 (b.1 z.1 x.1 rbp tmp-ra.1))
                                                      (z.1 (a.1 y.1 x.1 rbp tmp-ra.1))
                                                      (x.1 (b.1 a.1 z.1 y.1 rbp tmp-ra.1))
                                                      (y.1 (z.1 x.1 rbp tmp-ra.1))
                                                      (b.1 (x.1 a.1 rbp tmp-ra.1))
                                                      (tmp-ra.1 (rax b.1 a.1 z.1 y.1 x.1 rdi rbp))
                                                      (rbp (rax b.1 a.1 z.1 y.1 x.1 tmp-ra.1))
                                                      (rdi (tmp-ra.1))
                                                      (rax (rbp tmp-ra.1)))))
                                                   (begin
                                                     (set! tmp-ra.1 r15)
                                                     (set! x.1 rdi)
                                                     (set! y.1 1)
                                                     (set! z.1 2)
                                                     (set! a.1 y.1)
                                                     (set! a.1 (bitwise-and a.1 x.1))
                                                     (set! b.1 z.1)
                                                     (set! b.1 (bitwise-ior b.1 x.1))
                                                     (set! a.1 (bitwise-xor a.1 b.1))
                                                     (set! rax a.1)
                                                     (set! rax (arithmetic-shift-right rax 3))
                                                     (jump tmp-ra.1 rbp rax)))
                                                 (begin
                                                   (set! tmp-ra.2 r15)
                                                   (set! x.2 10)
                                                   (if (begin (set! x.3 100) (not (!= x.2 x.3)))
                                                       (begin (set! rdi x.2) (set! r15 tmp-ra.2) (jump L.f.1 rbp r15 rdi))
                                                       (begin (set! rdi 1000) (set! r15 tmp-ra.2) (jump L.f.2 rbp r15 rdi))))))
                '(module
                     ((new-frames ())
                      (locals (x.2 tmp-ra.2 x.3))
                      (call-undead ())
                      (undead-out
                       ((tmp-ra.2 rbp)
                        (x.2 tmp-ra.2 rbp)
                        (((x.3 x.2 tmp-ra.2 rbp) (x.2 tmp-ra.2 rbp))
                         ((tmp-ra.2 rdi rbp) (rdi r15 rbp) (rbp r15 rdi))
                         ((tmp-ra.2 rdi rbp) (rdi r15 rbp) (rbp r15 rdi)))))
                      (conflicts
                       ((x.2 (x.3 tmp-ra.2 rbp))
                        (tmp-ra.2 (rdi x.3 x.2 rbp))
                        (x.3 (x.2 tmp-ra.2 rbp))
                        (rbp (r15 rdi x.3 x.2 tmp-ra.2))
                        (rdi (r15 tmp-ra.2 rbp))
                        (r15 (rdi rbp))))
                      (assignment ()))
                   (define L.f.1
                     ((new-frames ())
                      (locals (a.1 z.1 x.1 y.1 b.1 tmp-ra.1))
                      (undead-out
                       ((rdi rbp tmp-ra.1)
                        (x.1 rbp tmp-ra.1)
                        (y.1 x.1 rbp tmp-ra.1)
                        (y.1 z.1 x.1 rbp tmp-ra.1)
                        (a.1 z.1 x.1 rbp tmp-ra.1)
                        (z.1 x.1 a.1 rbp tmp-ra.1)
                        (x.1 b.1 a.1 rbp tmp-ra.1)
                        (b.1 a.1 rbp tmp-ra.1)
                        (a.1 rbp tmp-ra.1)
                        (rax rbp tmp-ra.1)
                        (rax rbp tmp-ra.1)
                        (rbp rax)))
                      (call-undead ())
                      (conflicts
                       ((a.1 (b.1 z.1 x.1 rbp tmp-ra.1))
                        (z.1 (a.1 y.1 x.1 rbp tmp-ra.1))
                        (x.1 (b.1 a.1 z.1 y.1 rbp tmp-ra.1))
                        (y.1 (z.1 x.1 rbp tmp-ra.1))
                        (b.1 (x.1 a.1 rbp tmp-ra.1))
                        (tmp-ra.1 (rax b.1 a.1 z.1 y.1 x.1 rdi rbp))
                        (rbp (rax b.1 a.1 z.1 y.1 x.1 tmp-ra.1))
                        (rdi (tmp-ra.1))
                        (rax (rbp tmp-ra.1))))
                      (assignment ()))
                     (begin
                       (set! tmp-ra.1 r15)
                       (set! x.1 rdi)
                       (set! y.1 1)
                       (set! z.1 2)
                       (set! a.1 y.1)
                       (set! a.1 (bitwise-and a.1 x.1))
                       (set! b.1 z.1)
                       (set! b.1 (bitwise-ior b.1 x.1))
                       (set! a.1 (bitwise-xor a.1 b.1))
                       (set! rax a.1)
                       (set! rax (arithmetic-shift-right rax 3))
                       (jump tmp-ra.1 rbp rax)))
                   (begin
                     (set! tmp-ra.2 r15)
                     (set! x.2 10)
                     (if (begin (set! x.3 100) (not (!= x.2 x.3)))
                         (begin (set! rdi x.2) (set! r15 tmp-ra.2) (jump L.f.1 rbp r15 rdi))
                         (begin (set! rdi 1000) (set! r15 tmp-ra.2) (jump L.f.2 rbp r15 rdi))))))
  (check-equal? (assign-call-undead-variables '(module
                                                   ((new-frames ())
                                                    (locals (tmp.88 tmp-ra.95 tmp.87))
                                                    (call-undead (tmp.87 tmp-ra.95))
                                                    (undead-out
                                                     ((rbp tmp-ra.95)
                                                      ((tmp-ra.95 rbp)
                                                       ((rbp rax tmp-ra.95)
                                                        ((rdi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rbp r15 rdi rsi)))
                                                       (rax rbp tmp-ra.95))
                                                      (rbp tmp-ra.95 tmp.87)
                                                      ((tmp-ra.95 tmp.87 rbp)
                                                       ((rbp rax tmp.87 tmp-ra.95)
                                                        ((rdi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rbp r15 rdi rsi)))
                                                       (rax tmp.87 tmp-ra.95 rbp))
                                                      (tmp.87 tmp.88 tmp-ra.95 rbp)
                                                      (tmp.88 tmp-ra.95 rdi rbp)
                                                      (tmp-ra.95 rsi rdi rbp)
                                                      (rsi rdi r15 rbp)
                                                      (rbp r15 rdi rsi)))
                                                    (conflicts
                                                     ((tmp.87 (tmp.88 rbp tmp-ra.95))
                                                      (tmp-ra.95 (rsi rdi tmp.88 tmp.87 rbp))
                                                      (tmp.88 (rdi tmp.87 tmp-ra.95 rbp))
                                                      (rbp (tmp.88 tmp.87 rax r15 rsi rdi tmp-ra.95))
                                                      (rdi (tmp.88 tmp-ra.95 r15 rsi rbp))
                                                      (rsi (tmp-ra.95 r15 rdi rbp))
                                                      (r15 (rsi rdi rbp))
                                                      (rax (rbp)))))
                                                 (define L.*.17
                                                   ((new-frames ())
                                                    (locals (tmp.80 tmp.78 tmp.41 tmp.82 tmp.42 tmp.81 tmp.79 tmp-ra.93))
                                                    (undead-out
                                                     ((rdi rsi rbp tmp-ra.93)
                                                      (rsi tmp.41 rbp tmp-ra.93)
                                                      (tmp.42 tmp.41 rbp tmp-ra.93)
                                                      (((((tmp.79 tmp.42 tmp.41 rbp tmp-ra.93)
                                                          (tmp.79 tmp.42 tmp.41 rbp tmp-ra.93)
                                                          (tmp.42 tmp.41 rbp tmp-ra.93))
                                                         (tmp.78 tmp.42 tmp.41 rbp tmp-ra.93)
                                                         (tmp.78 tmp.42 tmp.41 rbp tmp-ra.93))
                                                        (tmp.42 tmp.41 rbp tmp-ra.93))
                                                       (((((tmp.81 tmp.42 tmp.41 rbp tmp-ra.93)
                                                           (tmp.81 tmp.42 tmp.41 rbp tmp-ra.93)
                                                           (tmp.42 tmp.41 rbp tmp-ra.93))
                                                          (tmp.80 tmp.42 tmp.41 rbp tmp-ra.93)
                                                          (tmp.80 tmp.42 tmp.41 rbp tmp-ra.93))
                                                         (tmp.42 tmp.41 rbp tmp-ra.93))
                                                        ((tmp.82 tmp.41 rbp tmp-ra.93)
                                                         (tmp.41 tmp.82 rbp tmp-ra.93)
                                                         (tmp.82 rax rbp tmp-ra.93)
                                                         (rax rbp tmp-ra.93)
                                                         (rbp rax))
                                                        ((rax rbp tmp-ra.93) (rbp rax)))
                                                       ((rax rbp tmp-ra.93) (rbp rax)))))
                                                    (call-undead ())
                                                    (conflicts
                                                     ((tmp-ra.93
                                                       (rax tmp.82 tmp.80 tmp.81 tmp.78 tmp.79 tmp.42 tmp.41 rdi rsi rbp))
                                                      (tmp.79 (tmp.42 tmp.41 rbp tmp-ra.93))
                                                      (tmp.81 (tmp.41 tmp.42 rbp tmp-ra.93))
                                                      (tmp.42 (tmp.80 tmp.81 tmp.78 tmp.79 tmp.41 rbp tmp-ra.93))
                                                      (tmp.82 (rax tmp.41 rbp tmp-ra.93))
                                                      (tmp.41 (tmp.82 tmp.80 tmp.81 tmp.78 tmp.79 tmp.42 rsi rbp tmp-ra.93))
                                                      (tmp.78 (tmp.42 tmp.41 rbp tmp-ra.93))
                                                      (tmp.80 (tmp.42 tmp.41 rbp tmp-ra.93))
                                                      (rbp (rax tmp.82 tmp.80 tmp.81 tmp.78 tmp.79 tmp.42 tmp.41 tmp-ra.93))
                                                      (rsi (tmp.41 tmp-ra.93))
                                                      (rdi (tmp-ra.93))
                                                      (rax (tmp.82 rbp tmp-ra.93)))))
                                                   (begin
                                                     (set! tmp-ra.93 r15)
                                                     (set! tmp.41 rdi)
                                                     (set! tmp.42 rsi)
                                                     (if (begin
                                                           (if (begin
                                                                 (set! tmp.79 tmp.42)
                                                                 (set! tmp.79 (bitwise-and tmp.79 7))
                                                                 (= tmp.79 0))
                                                               (set! tmp.78 14)
                                                               (set! tmp.78 6))
                                                           (!= tmp.78 6))
                                                         (if (begin
                                                               (if (begin
                                                                     (set! tmp.81 tmp.41)
                                                                     (set! tmp.81 (bitwise-and tmp.81 7))
                                                                     (= tmp.81 0))
                                                                   (set! tmp.80 14)
                                                                   (set! tmp.80 6))
                                                               (!= tmp.80 6))
                                                             (begin
                                                               (set! tmp.82 tmp.42)
                                                               (set! tmp.82 (arithmetic-shift-right tmp.82 3))
                                                               (set! rax tmp.41)
                                                               (set! rax (* rax tmp.82))
                                                               (jump tmp-ra.93 rbp rax))
                                                             (begin (set! rax 318) (jump tmp-ra.93 rbp rax)))
                                                         (begin (set! rax 318) (jump tmp-ra.93 rbp rax)))))
                                                 (define L.+.16
                                                   ((new-frames ())
                                                    (locals (tmp.39 tmp.85 tmp-ra.94 tmp.84 tmp.86 tmp.40 tmp.83))
                                                    (undead-out
                                                     ((rdi rsi rbp tmp-ra.94)
                                                      (rsi tmp.39 rbp tmp-ra.94)
                                                      (tmp.39 tmp.40 rbp tmp-ra.94)
                                                      (((((tmp.84 tmp.39 tmp.40 rbp tmp-ra.94)
                                                          (tmp.84 tmp.39 tmp.40 rbp tmp-ra.94)
                                                          (tmp.39 tmp.40 rbp tmp-ra.94))
                                                         (tmp.83 tmp.39 tmp.40 rbp tmp-ra.94)
                                                         (tmp.83 tmp.39 tmp.40 rbp tmp-ra.94))
                                                        (tmp.39 tmp.40 rbp tmp-ra.94))
                                                       (((((tmp.86 tmp.39 tmp.40 rbp tmp-ra.94)
                                                           (tmp.86 tmp.39 tmp.40 rbp tmp-ra.94)
                                                           (tmp.39 tmp.40 rbp tmp-ra.94))
                                                          (tmp.85 tmp.39 tmp.40 rbp tmp-ra.94)
                                                          (tmp.85 tmp.39 tmp.40 rbp tmp-ra.94))
                                                         (tmp.39 tmp.40 rbp tmp-ra.94))
                                                        ((tmp.40 rax rbp tmp-ra.94) (rax rbp tmp-ra.94) (rbp rax))
                                                        ((rax rbp tmp-ra.94) (rbp rax)))
                                                       ((rax rbp tmp-ra.94) (rbp rax)))))
                                                    (call-undead ())
                                                    (conflicts
                                                     ((tmp.83 (tmp.39 tmp.40 rbp tmp-ra.94))
                                                      (tmp.40 (rax tmp.85 tmp.86 tmp.83 tmp.84 tmp.39 rbp tmp-ra.94))
                                                      (tmp.86 (tmp.39 tmp.40 rbp tmp-ra.94))
                                                      (tmp.84 (tmp.40 tmp.39 rbp tmp-ra.94))
                                                      (tmp-ra.94 (rax tmp.85 tmp.86 tmp.83 tmp.84 tmp.40 tmp.39 rdi rsi rbp))
                                                      (tmp.85 (tmp.39 tmp.40 rbp tmp-ra.94))
                                                      (tmp.39 (tmp.85 tmp.86 tmp.83 tmp.84 tmp.40 rsi rbp tmp-ra.94))
                                                      (rbp (rax tmp.85 tmp.86 tmp.83 tmp.84 tmp.40 tmp.39 tmp-ra.94))
                                                      (rsi (tmp.39 tmp-ra.94))
                                                      (rdi (tmp-ra.94))
                                                      (rax (tmp.40 rbp tmp-ra.94)))))
                                                   (begin
                                                     (set! tmp-ra.94 r15)
                                                     (set! tmp.39 rdi)
                                                     (set! tmp.40 rsi)
                                                     (if (begin
                                                           (if (begin
                                                                 (set! tmp.84 tmp.40)
                                                                 (set! tmp.84 (bitwise-and tmp.84 7))
                                                                 (= tmp.84 0))
                                                               (set! tmp.83 14)
                                                               (set! tmp.83 6))
                                                           (!= tmp.83 6))
                                                         (if (begin
                                                               (if (begin
                                                                     (set! tmp.86 tmp.39)
                                                                     (set! tmp.86 (bitwise-and tmp.86 7))
                                                                     (= tmp.86 0))
                                                                   (set! tmp.85 14)
                                                                   (set! tmp.85 6))
                                                               (!= tmp.85 6))
                                                             (begin
                                                               (set! rax tmp.39)
                                                               (set! rax (+ rax tmp.40))
                                                               (jump tmp-ra.94 rbp rax))
                                                             (begin (set! rax 574) (jump tmp-ra.94 rbp rax)))
                                                         (begin (set! rax 574) (jump tmp-ra.94 rbp rax)))))
                                                 (begin
                                                   (set! tmp-ra.95 r15)
                                                   (begin
                                                     (set! rbp (- rbp 16))
                                                     (return-point L.rp.19
                                                                   (begin
                                                                     (set! rdi 40)
                                                                     (set! rsi 48)
                                                                     (set! r15 L.rp.19)
                                                                     (jump L.+.16 rbp r15 rdi rsi)))
                                                     (set! rbp (+ rbp 16)))
                                                   (set! tmp.87 rax)
                                                   (begin
                                                     (set! rbp (- rbp 16))
                                                     (return-point L.rp.20
                                                                   (begin
                                                                     (set! rdi 32)
                                                                     (set! rsi 40)
                                                                     (set! r15 L.rp.20)
                                                                     (jump L.*.17 rbp r15 rdi rsi)))
                                                     (set! rbp (+ rbp 16)))
                                                   (set! tmp.88 rax)
                                                   (set! rdi tmp.87)
                                                   (set! rsi tmp.88)
                                                   (set! r15 tmp-ra.95)
                                                   (jump L.+.16 rbp r15 rdi rsi))))
                '(module
                     ((new-frames ())
                      (locals (tmp.88))
                      (call-undead (tmp.87 tmp-ra.95))
                      (undead-out
                       ((rbp tmp-ra.95)
                        ((tmp-ra.95 rbp)
                         ((rbp rax tmp-ra.95)
                          ((rdi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rbp r15 rdi rsi)))
                         (rax rbp tmp-ra.95))
                        (rbp tmp-ra.95 tmp.87)
                        ((tmp-ra.95 tmp.87 rbp)
                         ((rbp rax tmp.87 tmp-ra.95)
                          ((rdi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rbp r15 rdi rsi)))
                         (rax tmp.87 tmp-ra.95 rbp))
                        (tmp.87 tmp.88 tmp-ra.95 rbp)
                        (tmp.88 tmp-ra.95 rdi rbp)
                        (tmp-ra.95 rsi rdi rbp)
                        (rsi rdi r15 rbp)
                        (rbp r15 rdi rsi)))
                      (conflicts
                       ((tmp.87 (tmp.88 rbp tmp-ra.95))
                        (tmp-ra.95 (rsi rdi tmp.88 tmp.87 rbp))
                        (tmp.88 (rdi tmp.87 tmp-ra.95 rbp))
                        (rbp (tmp.88 tmp.87 rax r15 rsi rdi tmp-ra.95))
                        (rdi (tmp.88 tmp-ra.95 r15 rsi rbp))
                        (rsi (tmp-ra.95 r15 rdi rbp))
                        (r15 (rsi rdi rbp))
                        (rax (rbp))))
                      (assignment ((tmp.87 fv1) (tmp-ra.95 fv0))))
                   (define L.*.17
                     ((new-frames ())
                      (locals (tmp-ra.93 tmp.79 tmp.81 tmp.42 tmp.82 tmp.41 tmp.78 tmp.80))
                      (undead-out
                       ((rdi rsi rbp tmp-ra.93)
                        (rsi tmp.41 rbp tmp-ra.93)
                        (tmp.42 tmp.41 rbp tmp-ra.93)
                        (((((tmp.79 tmp.42 tmp.41 rbp tmp-ra.93)
                            (tmp.79 tmp.42 tmp.41 rbp tmp-ra.93)
                            (tmp.42 tmp.41 rbp tmp-ra.93))
                           (tmp.78 tmp.42 tmp.41 rbp tmp-ra.93)
                           (tmp.78 tmp.42 tmp.41 rbp tmp-ra.93))
                          (tmp.42 tmp.41 rbp tmp-ra.93))
                         (((((tmp.81 tmp.42 tmp.41 rbp tmp-ra.93)
                             (tmp.81 tmp.42 tmp.41 rbp tmp-ra.93)
                             (tmp.42 tmp.41 rbp tmp-ra.93))
                            (tmp.80 tmp.42 tmp.41 rbp tmp-ra.93)
                            (tmp.80 tmp.42 tmp.41 rbp tmp-ra.93))
                           (tmp.42 tmp.41 rbp tmp-ra.93))
                          ((tmp.82 tmp.41 rbp tmp-ra.93)
                           (tmp.41 tmp.82 rbp tmp-ra.93)
                           (tmp.82 rax rbp tmp-ra.93)
                           (rax rbp tmp-ra.93)
                           (rbp rax))
                          ((rax rbp tmp-ra.93) (rbp rax)))
                         ((rax rbp tmp-ra.93) (rbp rax)))))
                      (call-undead ())
                      (conflicts
                       ((tmp-ra.93
                         (rax tmp.82 tmp.80 tmp.81 tmp.78 tmp.79 tmp.42 tmp.41 rdi rsi rbp))
                        (tmp.79 (tmp.42 tmp.41 rbp tmp-ra.93))
                        (tmp.81 (tmp.41 tmp.42 rbp tmp-ra.93))
                        (tmp.42 (tmp.80 tmp.81 tmp.78 tmp.79 tmp.41 rbp tmp-ra.93))
                        (tmp.82 (rax tmp.41 rbp tmp-ra.93))
                        (tmp.41 (tmp.82 tmp.80 tmp.81 tmp.78 tmp.79 tmp.42 rsi rbp tmp-ra.93))
                        (tmp.78 (tmp.42 tmp.41 rbp tmp-ra.93))
                        (tmp.80 (tmp.42 tmp.41 rbp tmp-ra.93))
                        (rbp (rax tmp.82 tmp.80 tmp.81 tmp.78 tmp.79 tmp.42 tmp.41 tmp-ra.93))
                        (rsi (tmp.41 tmp-ra.93))
                        (rdi (tmp-ra.93))
                        (rax (tmp.82 rbp tmp-ra.93))))
                      (assignment ()))
                     (begin
                       (set! tmp-ra.93 r15)
                       (set! tmp.41 rdi)
                       (set! tmp.42 rsi)
                       (if (begin
                             (if (begin
                                   (set! tmp.79 tmp.42)
                                   (set! tmp.79 (bitwise-and tmp.79 7))
                                   (= tmp.79 0))
                                 (set! tmp.78 14)
                                 (set! tmp.78 6))
                             (!= tmp.78 6))
                           (if (begin
                                 (if (begin
                                       (set! tmp.81 tmp.41)
                                       (set! tmp.81 (bitwise-and tmp.81 7))
                                       (= tmp.81 0))
                                     (set! tmp.80 14)
                                     (set! tmp.80 6))
                                 (!= tmp.80 6))
                               (begin
                                 (set! tmp.82 tmp.42)
                                 (set! tmp.82 (arithmetic-shift-right tmp.82 3))
                                 (set! rax tmp.41)
                                 (set! rax (* rax tmp.82))
                                 (jump tmp-ra.93 rbp rax))
                               (begin (set! rax 318) (jump tmp-ra.93 rbp rax)))
                           (begin (set! rax 318) (jump tmp-ra.93 rbp rax)))))
                   (define L.+.16
                     ((new-frames ())
                      (locals (tmp.83 tmp.40 tmp.86 tmp.84 tmp-ra.94 tmp.85 tmp.39))
                      (undead-out
                       ((rdi rsi rbp tmp-ra.94)
                        (rsi tmp.39 rbp tmp-ra.94)
                        (tmp.39 tmp.40 rbp tmp-ra.94)
                        (((((tmp.84 tmp.39 tmp.40 rbp tmp-ra.94)
                            (tmp.84 tmp.39 tmp.40 rbp tmp-ra.94)
                            (tmp.39 tmp.40 rbp tmp-ra.94))
                           (tmp.83 tmp.39 tmp.40 rbp tmp-ra.94)
                           (tmp.83 tmp.39 tmp.40 rbp tmp-ra.94))
                          (tmp.39 tmp.40 rbp tmp-ra.94))
                         (((((tmp.86 tmp.39 tmp.40 rbp tmp-ra.94)
                             (tmp.86 tmp.39 tmp.40 rbp tmp-ra.94)
                             (tmp.39 tmp.40 rbp tmp-ra.94))
                            (tmp.85 tmp.39 tmp.40 rbp tmp-ra.94)
                            (tmp.85 tmp.39 tmp.40 rbp tmp-ra.94))
                           (tmp.39 tmp.40 rbp tmp-ra.94))
                          ((tmp.40 rax rbp tmp-ra.94) (rax rbp tmp-ra.94) (rbp rax))
                          ((rax rbp tmp-ra.94) (rbp rax)))
                         ((rax rbp tmp-ra.94) (rbp rax)))))
                      (call-undead ())
                      (conflicts
                       ((tmp.83 (tmp.39 tmp.40 rbp tmp-ra.94))
                        (tmp.40 (rax tmp.85 tmp.86 tmp.83 tmp.84 tmp.39 rbp tmp-ra.94))
                        (tmp.86 (tmp.39 tmp.40 rbp tmp-ra.94))
                        (tmp.84 (tmp.40 tmp.39 rbp tmp-ra.94))
                        (tmp-ra.94 (rax tmp.85 tmp.86 tmp.83 tmp.84 tmp.40 tmp.39 rdi rsi rbp))
                        (tmp.85 (tmp.39 tmp.40 rbp tmp-ra.94))
                        (tmp.39 (tmp.85 tmp.86 tmp.83 tmp.84 tmp.40 rsi rbp tmp-ra.94))
                        (rbp (rax tmp.85 tmp.86 tmp.83 tmp.84 tmp.40 tmp.39 tmp-ra.94))
                        (rsi (tmp.39 tmp-ra.94))
                        (rdi (tmp-ra.94))
                        (rax (tmp.40 rbp tmp-ra.94))))
                      (assignment ()))
                     (begin
                       (set! tmp-ra.94 r15)
                       (set! tmp.39 rdi)
                       (set! tmp.40 rsi)
                       (if (begin
                             (if (begin
                                   (set! tmp.84 tmp.40)
                                   (set! tmp.84 (bitwise-and tmp.84 7))
                                   (= tmp.84 0))
                                 (set! tmp.83 14)
                                 (set! tmp.83 6))
                             (!= tmp.83 6))
                           (if (begin
                                 (if (begin
                                       (set! tmp.86 tmp.39)
                                       (set! tmp.86 (bitwise-and tmp.86 7))
                                       (= tmp.86 0))
                                     (set! tmp.85 14)
                                     (set! tmp.85 6))
                                 (!= tmp.85 6))
                               (begin
                                 (set! rax tmp.39)
                                 (set! rax (+ rax tmp.40))
                                 (jump tmp-ra.94 rbp rax))
                               (begin (set! rax 574) (jump tmp-ra.94 rbp rax)))
                           (begin (set! rax 574) (jump tmp-ra.94 rbp rax)))))
                   (begin
                     (set! tmp-ra.95 r15)
                     (begin
                       (set! rbp (- rbp 16))
                       (return-point L.rp.19
                                     (begin
                                       (set! rdi 40)
                                       (set! rsi 48)
                                       (set! r15 L.rp.19)
                                       (jump L.+.16 rbp r15 rdi rsi)))
                       (set! rbp (+ rbp 16)))
                     (set! tmp.87 rax)
                     (begin
                       (set! rbp (- rbp 16))
                       (return-point L.rp.20
                                     (begin
                                       (set! rdi 32)
                                       (set! rsi 40)
                                       (set! r15 L.rp.20)
                                       (jump L.*.17 rbp r15 rdi rsi)))
                       (set! rbp (+ rbp 16)))
                     (set! tmp.88 rax)
                     (set! rdi tmp.87)
                     (set! rsi tmp.88)
                     (set! r15 tmp-ra.95)
                     (jump L.+.16 rbp r15 rdi rsi)))))
