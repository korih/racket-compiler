#lang racket

(require
  cpsc411/compiler-lib
  cpsc411/langs/v8
  rackunit)

(provide flatten-program)

;; block-asm-lang-v8 -> para-asm-lang-v8
;; interp. flatten begin statements in the program
(define/contract (flatten-program p)
  (-> block-asm-lang-v8? para-asm-lang-v8?)

  ;; block-asm-lang-v8.b -> (list para-asm-lang-v8.s)
  ;; convert b expressions to flattened s expressions
  (define (flatten-program/b b)
    (match b
      [`(define ,label ,tail)
       (define compiled-s (flatten-program/tail tail))
       (cons `(with-label ,label ,(first compiled-s)) (rest compiled-s))]))

  ;; block-asm-lang-v8.tail -> (list para-asm-lang-v8.s)
  ;; interp. flattens the tail expression into a list of s statements
  (define (flatten-program/tail tail)
    (match tail
      [`(halt ,opand) (list `(halt, opand))]
      [`(jump ,trg) (list `(jump ,trg))]
      [`(begin ,fx ... ,tail)
       ;; Note that block-asm-lang-v8.effect expressions are already para-asm-lang-v8.s expressions
       (append fx (flatten-program/tail tail))]
      [`(if (,relop ,loc ,opand) (jump ,trg1) (jump ,trg2))
       (list `(compare ,loc ,opand) `(jump-if ,relop ,trg1) `(jump ,trg2))]))

  (match p
    [`(module ,bs ...)
     (define compiled-s (for/fold ([s empty])
                                  ([b bs])
                          (append s (flatten-program/b b))))
     `(begin ,@compiled-s)]))


(module+ test
  (let ([x (fresh-label)])
    (check-equal? (flatten-program `(module (define ,x (jump ,x)))) `(begin (with-label ,x (jump ,x)))))
  (let ([x (fresh-label)])
    (check-equal? (flatten-program `(module (define ,x (begin (set! rbx 1) (jump ,x)))))
                  `(begin (with-label ,x (set! rbx 1)) (jump ,x))))
  (let ([x (fresh-label)])
    (check-equal? (flatten-program `(module (define ,x (begin (set! rax 0) (begin (set! rbx 1) (jump ,x))))))
                  `(begin (with-label ,x (set! rax 0)) (set! rbx 1) (jump ,x))))
  (let ([x (fresh-label)])
    (check-equal? (flatten-program `(module (define ,x (begin (begin (set! rax 0) (jump ,x))))))
                  `(begin (with-label ,x (set! rax 0)) (jump ,x))))
  (let ([x (fresh-label)]
        [y (fresh-label)])
    (check-equal? (flatten-program `(module (define ,x (jump ,y)) (define ,y (jump ,x))))
                  `(begin (with-label ,x (jump ,y)) (with-label ,y (jump ,x)))))
  (let ([x (fresh-label)]
        [y (fresh-label)]
        [z (fresh-label)])
    (check-equal? (flatten-program `(module (define ,x (if (< r9 0) (jump ,y) (jump ,z)))
                                      (define ,y (jump r8))
                                      (define ,z (begin (set! r9 (+ r9 -1)) (jump ,x)))))
                  `(begin (with-label ,x (compare r9 0))
                          (jump-if < ,y)
                          (jump ,z)
                          (with-label ,y (jump r8))
                          (with-label ,z (set! r9 (+ r9 -1)))
                          (jump ,x))))
  (let ([x (fresh-label)]
        [y (fresh-label)]
        [z (fresh-label)])
    (check-equal? (flatten-program `(module (define ,x (begin (set! r9 0) (jump ,y)))
                                      (define ,y (begin (set! r13 0) (jump ,z)))
                                      (define ,z (jump r8))))
                  `(begin (with-label ,x (set! r9 0))
                          (jump ,y)
                          (with-label ,y (set! r13 0))
                          (jump ,z)
                          (with-label ,z (jump r8)))))
  (check-equal? (flatten-program '(module
                                      (define L.tmp.99
                                        (begin
                                          (set! rbx r15)
                                          (set! rcx 10)
                                          (set! rsp 100)
                                          (if (!= rcx rsp) (jump L.tmp.101) (jump L.tmp.100))))
                                    (define L.tmp.101 (begin (set! rdi 1000) (set! r15 rbx) (jump L.f.2)))
                                    (define L.tmp.100 (begin (set! rdi rcx) (set! r15 rbx) (jump L.f.1)))
                                    (define L.f.1
                                      (begin
                                        (set! rsp r15)
                                        (set! rcx rdi)
                                        (set! rdx 1)
                                        (set! rbx 2)
                                        (set! rdx rdx)
                                        (set! rdx (bitwise-and rdx rcx))
                                        (set! rbx rbx)
                                        (set! rbx (bitwise-ior rbx rcx))
                                        (set! rdx (bitwise-xor rdx rbx))
                                        (set! rax rdx)
                                        (set! rax (arithmetic-shift-right rax 3))
                                        (jump rsp)))))
                '(begin
                   (with-label L.tmp.99 (set! rbx r15))
                   (set! rcx 10)
                   (set! rsp 100)
                   (compare rcx rsp)
                   (jump-if != L.tmp.101)
                   (jump L.tmp.100)
                   (with-label L.tmp.101 (set! rdi 1000))
                   (set! r15 rbx)
                   (jump L.f.2)
                   (with-label L.tmp.100 (set! rdi rcx))
                   (set! r15 rbx)
                   (jump L.f.1)
                   (with-label L.f.1 (set! rsp r15))
                   (set! rcx rdi)
                   (set! rdx 1)
                   (set! rbx 2)
                   (set! rdx rdx)
                   (set! rdx (bitwise-and rdx rcx))
                   (set! rbx rbx)
                   (set! rbx (bitwise-ior rbx rcx))
                   (set! rdx (bitwise-xor rdx rbx))
                   (set! rax rdx)
                   (set! rax (arithmetic-shift-right rax 3))
                   (jump rsp)))
  (check-equal? (flatten-program '(module
                                      (define L.tmp.105
                                        (begin
                                          (set! rsp r15)
                                          (set! rdi 1)
                                          (set! rsi 2)
                                          (set! r15 rsp)
                                          (jump L.f.1)))
                                    (define L.g.1 (begin (set! rsp r15) (set! rax 8) (jump rsp)))
                                    (define L.f.1
                                      (begin
                                        (set! (rbp - 24) r15)
                                        (set! (rbp - 8) rdi)
                                        (set! (rbp - 0) rsi)
                                        (set! rsp 10)
                                        (set! rsp (+ rsp 6))
                                        (set! (rbp - 16) r12)
                                        (set! r12 (+ r12 rsp))
                                        (set! rbp (- rbp 32))
                                        (set! r15 L.rp.21)
                                        (jump L.g.1)))
                                    (define L.rp.21
                                      (begin (set! rbp (+ rbp 32)) (set! rsp rax) (jump L.tmp.103)))
                                    (define L.tmp.102
                                      (begin
                                        (set! rbx 10)
                                        (set! rbx (+ rbx 6))
                                        (set! rsp r12)
                                        (set! r12 (+ r12 rbx))
                                        (set! rbx 8)
                                        (set! rbx (bitwise-and rbx 8))
                                        (set! rax (mref rsp rbx))
                                        (jump (rbp - 24))))
                                    (define L.tmp.104 (begin (mset! (rbp - 16) rsp (rbp - 0)) (jump L.tmp.102)))
                                    (define L.tmp.103 (begin (mset! (rbp - 16) rsp (rbp - 8)) (jump L.tmp.102)))))
                '(begin
                   (with-label L.tmp.105 (set! rsp r15))
                   (set! rdi 1)
                   (set! rsi 2)
                   (set! r15 rsp)
                   (jump L.f.1)
                   (with-label L.g.1 (set! rsp r15))
                   (set! rax 8)
                   (jump rsp)
                   (with-label L.f.1 (set! (rbp - 24) r15))
                   (set! (rbp - 8) rdi)
                   (set! (rbp - 0) rsi)
                   (set! rsp 10)
                   (set! rsp (+ rsp 6))
                   (set! (rbp - 16) r12)
                   (set! r12 (+ r12 rsp))
                   (set! rbp (- rbp 32))
                   (set! r15 L.rp.21)
                   (jump L.g.1)
                   (with-label L.rp.21 (set! rbp (+ rbp 32)))
                   (set! rsp rax)
                   (jump L.tmp.103)
                   (with-label L.tmp.102 (set! rbx 10))
                   (set! rbx (+ rbx 6))
                   (set! rsp r12)
                   (set! r12 (+ r12 rbx))
                   (set! rbx 8)
                   (set! rbx (bitwise-and rbx 8))
                   (set! rax (mref rsp rbx))
                   (jump (rbp - 24))
                   (with-label L.tmp.104 (mset! (rbp - 16) rsp (rbp - 0)))
                   (jump L.tmp.102)
                   (with-label L.tmp.103 (mset! (rbp - 16) rsp (rbp - 8)))
                   (jump L.tmp.102)))
  (check-equal? (interp-para-asm-lang-v8 (flatten-program
                                          '(module
                                               (define L.__main.20
                                                 (begin
                                                   (set! (rbp - 0) r15)
                                                   (set! rbp (- rbp 24))
                                                   (set! r15 L.rp.13)
                                                   (jump L.v.4)))
                                             (define L.+.12
                                               (begin
                                                 (set! r15 r15)
                                                 (set! r13 rdi)
                                                 (set! r14 rsi)
                                                 (set! r9 r14)
                                                 (set! r9 (bitwise-and r9 7))
                                                 (if (= r9 0) (jump L.tmp.28) (jump L.tmp.29))))
                                             (define L.tmp.28 (begin (set! r9 14) (jump L.tmp.30)))
                                             (define L.tmp.29 (begin (set! r9 6) (jump L.tmp.30)))
                                             (define L.tmp.30 (if (!= r9 6) (jump L.__nested.21) (jump L.__nested.22)))
                                             (define L.tmp.25 (begin (set! r9 14) (jump L.tmp.27)))
                                             (define L.tmp.26 (begin (set! r9 6) (jump L.tmp.27)))
                                             (define L.tmp.27 (if (!= r9 6) (jump L.__nested.23) (jump L.__nested.24)))
                                             (define L.__nested.23
                                               (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15)))
                                             (define L.__nested.24 (begin (set! rax 574) (jump r15)))
                                             (define L.__nested.21
                                               (begin
                                                 (set! r9 r13)
                                                 (set! r9 (bitwise-and r9 7))
                                                 (if (= r9 0) (jump L.tmp.25) (jump L.tmp.26))))
                                             (define L.__nested.22 (begin (set! rax 574) (jump r15)))
                                             (define L.void?.11
                                               (begin
                                                 (set! r15 r15)
                                                 (set! r14 rdi)
                                                 (set! r14 r14)
                                                 (set! r14 (bitwise-and r14 255))
                                                 (if (= r14 30) (jump L.__nested.31) (jump L.__nested.32))))
                                             (define L.__nested.31 (begin (set! rax 14) (jump r15)))
                                             (define L.__nested.32 (begin (set! rax 6) (jump r15)))
                                             (define L.unsafe-vector-ref.3
                                               (begin
                                                 (set! r15 r15)
                                                 (set! r14 rdi)
                                                 (set! r13 rsi)
                                                 (set! r9 (mref r14 -3))
                                                 (if (< r13 r9) (jump L.tmp.40) (jump L.tmp.41))))
                                             (define L.tmp.40 (begin (set! r9 14) (jump L.tmp.42)))
                                             (define L.tmp.41 (begin (set! r9 6) (jump L.tmp.42)))
                                             (define L.tmp.42 (if (!= r9 6) (jump L.__nested.33) (jump L.__nested.34)))
                                             (define L.tmp.37 (begin (set! r9 14) (jump L.tmp.39)))
                                             (define L.tmp.38 (begin (set! r9 6) (jump L.tmp.39)))
                                             (define L.tmp.39 (if (!= r9 6) (jump L.__nested.35) (jump L.__nested.36)))
                                             (define L.__nested.35
                                               (begin
                                                 (set! r13 r13)
                                                 (set! r13 (arithmetic-shift-right r13 3))
                                                 (set! r13 r13)
                                                 (set! r13 (* r13 8))
                                                 (set! r13 r13)
                                                 (set! r13 (+ r13 5))
                                                 (set! rax (mref r14 r13))
                                                 (jump r15)))
                                             (define L.__nested.36 (begin (set! rax 2878) (jump r15)))
                                             (define L.__nested.33 (if (>= r13 0) (jump L.tmp.37) (jump L.tmp.38)))
                                             (define L.__nested.34 (begin (set! rax 2878) (jump r15)))
                                             (define L.vector-ref.10
                                               (begin
                                                 (set! r15 r15)
                                                 (set! r14 rdi)
                                                 (set! r13 rsi)
                                                 (set! r9 r13)
                                                 (set! r9 (bitwise-and r9 7))
                                                 (if (= r9 0) (jump L.tmp.50) (jump L.tmp.51))))
                                             (define L.tmp.50 (begin (set! r9 14) (jump L.tmp.52)))
                                             (define L.tmp.51 (begin (set! r9 6) (jump L.tmp.52)))
                                             (define L.tmp.52 (if (!= r9 6) (jump L.__nested.43) (jump L.__nested.44)))
                                             (define L.tmp.47 (begin (set! r9 14) (jump L.tmp.49)))
                                             (define L.tmp.48 (begin (set! r9 6) (jump L.tmp.49)))
                                             (define L.tmp.49 (if (!= r9 6) (jump L.__nested.45) (jump L.__nested.46)))
                                             (define L.__nested.45
                                               (begin
                                                 (set! rsi r13)
                                                 (set! rdi r14)
                                                 (set! r15 r15)
                                                 (jump L.unsafe-vector-ref.3)))
                                             (define L.__nested.46 (begin (set! rax 2878) (jump r15)))
                                             (define L.__nested.43
                                               (begin
                                                 (set! r9 r14)
                                                 (set! r9 (bitwise-and r9 7))
                                                 (if (= r9 3) (jump L.tmp.47) (jump L.tmp.48))))
                                             (define L.__nested.44 (begin (set! rax 2878) (jump r15)))
                                             (define L.unsafe-vector-set!.2
                                               (begin
                                                 (set! r15 r15)
                                                 (set! r14 rdi)
                                                 (set! r9 rsi)
                                                 (set! r13 rdx)
                                                 (set! r8 (mref r14 -3))
                                                 (if (< r9 r8) (jump L.tmp.60) (jump L.tmp.61))))
                                             (define L.tmp.60 (begin (set! r8 14) (jump L.tmp.62)))
                                             (define L.tmp.61 (begin (set! r8 6) (jump L.tmp.62)))
                                             (define L.tmp.62 (if (!= r8 6) (jump L.__nested.53) (jump L.__nested.54)))
                                             (define L.tmp.57 (begin (set! r8 14) (jump L.tmp.59)))
                                             (define L.tmp.58 (begin (set! r8 6) (jump L.tmp.59)))
                                             (define L.tmp.59 (if (!= r8 6) (jump L.__nested.55) (jump L.__nested.56)))
                                             (define L.__nested.55
                                               (begin
                                                 (set! r9 r9)
                                                 (set! r9 (arithmetic-shift-right r9 3))
                                                 (set! r9 r9)
                                                 (set! r9 (* r9 8))
                                                 (set! r9 r9)
                                                 (set! r9 (+ r9 5))
                                                 (mset! r14 r9 r13)
                                                 (set! rax 30)
                                                 (jump r15)))
                                             (define L.__nested.56 (begin (set! rax 2622) (jump r15)))
                                             (define L.__nested.53 (if (>= r9 0) (jump L.tmp.57) (jump L.tmp.58)))
                                             (define L.__nested.54 (begin (set! rax 2622) (jump r15)))
                                             (define L.vector-set!.9
                                               (begin
                                                 (set! r15 r15)
                                                 (set! r14 rdi)
                                                 (set! r13 rsi)
                                                 (set! r9 rdx)
                                                 (set! r8 r13)
                                                 (set! r8 (bitwise-and r8 7))
                                                 (if (= r8 0) (jump L.tmp.70) (jump L.tmp.71))))
                                             (define L.tmp.70 (begin (set! r8 14) (jump L.tmp.72)))
                                             (define L.tmp.71 (begin (set! r8 6) (jump L.tmp.72)))
                                             (define L.tmp.72 (if (!= r8 6) (jump L.__nested.63) (jump L.__nested.64)))
                                             (define L.tmp.67 (begin (set! r8 14) (jump L.tmp.69)))
                                             (define L.tmp.68 (begin (set! r8 6) (jump L.tmp.69)))
                                             (define L.tmp.69 (if (!= r8 6) (jump L.__nested.65) (jump L.__nested.66)))
                                             (define L.__nested.65
                                               (begin
                                                 (set! rdx r9)
                                                 (set! rsi r13)
                                                 (set! rdi r14)
                                                 (set! r15 r15)
                                                 (jump L.unsafe-vector-set!.2)))
                                             (define L.__nested.66 (begin (set! rax 2622) (jump r15)))
                                             (define L.__nested.63
                                               (begin
                                                 (set! r8 r14)
                                                 (set! r8 (bitwise-and r8 7))
                                                 (if (= r8 3) (jump L.tmp.67) (jump L.tmp.68))))
                                             (define L.__nested.64 (begin (set! rax 2622) (jump r15)))
                                             (define L.vector-init-loop.7
                                               (begin
                                                 (set! r15 r15)
                                                 (set! r14 rdi)
                                                 (set! r13 rsi)
                                                 (set! r9 rdx)
                                                 (if (= r14 r13) (jump L.tmp.75) (jump L.tmp.76))))
                                             (define L.tmp.75 (begin (set! r8 14) (jump L.tmp.77)))
                                             (define L.tmp.76 (begin (set! r8 6) (jump L.tmp.77)))
                                             (define L.tmp.77 (if (!= r8 6) (jump L.__nested.73) (jump L.__nested.74)))
                                             (define L.__nested.73 (begin (set! rax r9) (jump r15)))
                                             (define L.__nested.74
                                               (begin
                                                 (set! r8 r13)
                                                 (set! r8 (arithmetic-shift-right r8 3))
                                                 (set! r8 r8)
                                                 (set! r8 (* r8 8))
                                                 (set! r8 r8)
                                                 (set! r8 (+ r8 5))
                                                 (mset! r9 r8 0)
                                                 (set! r13 r13)
                                                 (set! r13 (+ r13 8))
                                                 (set! rdx r9)
                                                 (set! rsi r13)
                                                 (set! rdi r14)
                                                 (set! r15 r15)
                                                 (jump L.vector-init-loop.7)))
                                             (define L.make-init-vector.1
                                               (begin
                                                 (set! r15 r15)
                                                 (set! r14 rdi)
                                                 (if (>= r14 0) (jump L.tmp.80) (jump L.tmp.81))))
                                             (define L.tmp.80 (begin (set! r13 14) (jump L.tmp.82)))
                                             (define L.tmp.81 (begin (set! r13 6) (jump L.tmp.82)))
                                             (define L.tmp.82 (if (!= r13 6) (jump L.__nested.78) (jump L.__nested.79)))
                                             (define L.__nested.78
                                               (begin
                                                 (set! r9 r14)
                                                 (set! r9 (arithmetic-shift-right r9 3))
                                                 (set! r13 1)
                                                 (set! r13 (+ r13 r9))
                                                 (set! r9 r13)
                                                 (set! r9 (* r9 8))
                                                 (set! r13 r12)
                                                 (set! r12 (+ r12 r9))
                                                 (set! r13 r13)
                                                 (set! r13 (+ r13 3))
                                                 (mset! r13 -3 r14)
                                                 (set! r13 r13)
                                                 (set! rdx r13)
                                                 (set! rsi 0)
                                                 (set! rdi r14)
                                                 (set! r15 r15)
                                                 (jump L.vector-init-loop.7)))
                                             (define L.__nested.79 (begin (set! rax 3134) (jump r15)))
                                             (define L.make-vector.8
                                               (begin
                                                 (set! r15 r15)
                                                 (set! r14 rdi)
                                                 (set! r13 r14)
                                                 (set! r13 (bitwise-and r13 7))
                                                 (if (= r13 0) (jump L.tmp.85) (jump L.tmp.86))))
                                             (define L.tmp.85 (begin (set! r13 14) (jump L.tmp.87)))
                                             (define L.tmp.86 (begin (set! r13 6) (jump L.tmp.87)))
                                             (define L.tmp.87 (if (!= r13 6) (jump L.__nested.83) (jump L.__nested.84)))
                                             (define L.__nested.83
                                               (begin (set! rdi r14) (set! r15 r15) (jump L.make-init-vector.1)))
                                             (define L.__nested.84 (begin (set! rax 2110) (jump r15)))
                                             (define L.v.4
                                               (begin (set! r15 r15) (set! rdi 24) (set! r15 r15) (jump L.make-vector.8)))
                                             (define L.set-first.5
                                               (begin
                                                 (set! r15 r15)
                                                 (set! r14 rdi)
                                                 (set! rdx 336)
                                                 (set! rsi 0)
                                                 (set! rdi r14)
                                                 (set! r15 r15)
                                                 (jump L.vector-set!.9)))
                                             (define L.get-first.6
                                               (begin
                                                 (set! r15 r15)
                                                 (set! r14 rdi)
                                                 (set! rsi 0)
                                                 (set! rdi r14)
                                                 (set! r15 r15)
                                                 (jump L.vector-ref.10)))
                                             (define L.rp.13
                                               (begin
                                                 (set! rbp (+ rbp 24))
                                                 (set! (rbp - 16) rax)
                                                 (set! rbp (- rbp 24))
                                                 (set! rdi (rbp - -8))
                                                 (set! r15 L.rp.14)
                                                 (jump L.set-first.5)))
                                             (define L.rp.14
                                               (begin
                                                 (set! rbp (+ rbp 24))
                                                 (set! r15 rax)
                                                 (set! rbp (- rbp 24))
                                                 (set! rdi r15)
                                                 (set! r15 L.rp.15)
                                                 (jump L.void?.11)))
                                             (define L.rp.15
                                               (begin
                                                 (set! rbp (+ rbp 24))
                                                 (set! r15 rax)
                                                 (if (!= r15 6) (jump L.tmp.17) (jump L.tmp.18))))
                                             (define L.tmp.17 (begin (set! (rbp - 8) 0) (jump L.tmp.19)))
                                             (define L.tmp.18 (begin (set! (rbp - 8) 318) (jump L.tmp.19)))
                                             (define L.tmp.19
                                               (begin
                                                 (set! rbp (- rbp 24))
                                                 (set! rdi (rbp - -8))
                                                 (set! r15 L.rp.16)
                                                 (jump L.get-first.6)))
                                             (define L.rp.16
                                               (begin
                                                 (set! rbp (+ rbp 24))
                                                 (set! r15 rax)
                                                 (set! rsi r15)
                                                 (set! rdi (rbp - 8))
                                                 (set! r15 (rbp - 0))
                                                 (jump L.+.12))))))
                (interp-para-asm-lang-v8 '(begin
                                            (with-label L.__main.20 (set! (rbp - 0) r15))
                                            (set! rbp (- rbp 24))
                                            (set! r15 L.rp.13)
                                            (jump L.v.4)
                                            (with-label L.+.12 (set! r15 r15))
                                            (set! r13 rdi)
                                            (set! r14 rsi)
                                            (set! r9 r14)
                                            (set! r9 (bitwise-and r9 7))
                                            (compare r9 0)
                                            (jump-if = L.tmp.28)
                                            (jump L.tmp.29)
                                            (with-label L.tmp.28 (set! r9 14))
                                            (jump L.tmp.30)
                                            (with-label L.tmp.29 (set! r9 6))
                                            (jump L.tmp.30)
                                            (with-label L.tmp.30 (compare r9 6))
                                            (jump-if != L.__nested.21)
                                            (jump L.__nested.22)
                                            (with-label L.tmp.25 (set! r9 14))
                                            (jump L.tmp.27)
                                            (with-label L.tmp.26 (set! r9 6))
                                            (jump L.tmp.27)
                                            (with-label L.tmp.27 (compare r9 6))
                                            (jump-if != L.__nested.23)
                                            (jump L.__nested.24)
                                            (with-label L.__nested.23 (set! rax r13))
                                            (set! rax (+ rax r14))
                                            (jump r15)
                                            (with-label L.__nested.24 (set! rax 574))
                                            (jump r15)
                                            (with-label L.__nested.21 (set! r9 r13))
                                            (set! r9 (bitwise-and r9 7))
                                            (compare r9 0)
                                            (jump-if = L.tmp.25)
                                            (jump L.tmp.26)
                                            (with-label L.__nested.22 (set! rax 574))
                                            (jump r15)
                                            (with-label L.void?.11 (set! r15 r15))
                                            (set! r14 rdi)
                                            (set! r14 r14)
                                            (set! r14 (bitwise-and r14 255))
                                            (compare r14 30)
                                            (jump-if = L.__nested.31)
                                            (jump L.__nested.32)
                                            (with-label L.__nested.31 (set! rax 14))
                                            (jump r15)
                                            (with-label L.__nested.32 (set! rax 6))
                                            (jump r15)
                                            (with-label L.unsafe-vector-ref.3 (set! r15 r15))
                                            (set! r14 rdi)
                                            (set! r13 rsi)
                                            (set! r9 (mref r14 -3))
                                            (compare r13 r9)
                                            (jump-if < L.tmp.40)
                                            (jump L.tmp.41)
                                            (with-label L.tmp.40 (set! r9 14))
                                            (jump L.tmp.42)
                                            (with-label L.tmp.41 (set! r9 6))
                                            (jump L.tmp.42)
                                            (with-label L.tmp.42 (compare r9 6))
                                            (jump-if != L.__nested.33)
                                            (jump L.__nested.34)
                                            (with-label L.tmp.37 (set! r9 14))
                                            (jump L.tmp.39)
                                            (with-label L.tmp.38 (set! r9 6))
                                            (jump L.tmp.39)
                                            (with-label L.tmp.39 (compare r9 6))
                                            (jump-if != L.__nested.35)
                                            (jump L.__nested.36)
                                            (with-label L.__nested.35 (set! r13 r13))
                                            (set! r13 (arithmetic-shift-right r13 3))
                                            (set! r13 r13)
                                            (set! r13 (* r13 8))
                                            (set! r13 r13)
                                            (set! r13 (+ r13 5))
                                            (set! rax (mref r14 r13))
                                            (jump r15)
                                            (with-label L.__nested.36 (set! rax 2878))
                                            (jump r15)
                                            (with-label L.__nested.33 (compare r13 0))
                                            (jump-if >= L.tmp.37)
                                            (jump L.tmp.38)
                                            (with-label L.__nested.34 (set! rax 2878))
                                            (jump r15)
                                            (with-label L.vector-ref.10 (set! r15 r15))
                                            (set! r14 rdi)
                                            (set! r13 rsi)
                                            (set! r9 r13)
                                            (set! r9 (bitwise-and r9 7))
                                            (compare r9 0)
                                            (jump-if = L.tmp.50)
                                            (jump L.tmp.51)
                                            (with-label L.tmp.50 (set! r9 14))
                                            (jump L.tmp.52)
                                            (with-label L.tmp.51 (set! r9 6))
                                            (jump L.tmp.52)
                                            (with-label L.tmp.52 (compare r9 6))
                                            (jump-if != L.__nested.43)
                                            (jump L.__nested.44)
                                            (with-label L.tmp.47 (set! r9 14))
                                            (jump L.tmp.49)
                                            (with-label L.tmp.48 (set! r9 6))
                                            (jump L.tmp.49)
                                            (with-label L.tmp.49 (compare r9 6))
                                            (jump-if != L.__nested.45)
                                            (jump L.__nested.46)
                                            (with-label L.__nested.45 (set! rsi r13))
                                            (set! rdi r14)
                                            (set! r15 r15)
                                            (jump L.unsafe-vector-ref.3)
                                            (with-label L.__nested.46 (set! rax 2878))
                                            (jump r15)
                                            (with-label L.__nested.43 (set! r9 r14))
                                            (set! r9 (bitwise-and r9 7))
                                            (compare r9 3)
                                            (jump-if = L.tmp.47)
                                            (jump L.tmp.48)
                                            (with-label L.__nested.44 (set! rax 2878))
                                            (jump r15)
                                            (with-label L.unsafe-vector-set!.2 (set! r15 r15))
                                            (set! r14 rdi)
                                            (set! r9 rsi)
                                            (set! r13 rdx)
                                            (set! r8 (mref r14 -3))
                                            (compare r9 r8)
                                            (jump-if < L.tmp.60)
                                            (jump L.tmp.61)
                                            (with-label L.tmp.60 (set! r8 14))
                                            (jump L.tmp.62)
                                            (with-label L.tmp.61 (set! r8 6))
                                            (jump L.tmp.62)
                                            (with-label L.tmp.62 (compare r8 6))
                                            (jump-if != L.__nested.53)
                                            (jump L.__nested.54)
                                            (with-label L.tmp.57 (set! r8 14))
                                            (jump L.tmp.59)
                                            (with-label L.tmp.58 (set! r8 6))
                                            (jump L.tmp.59)
                                            (with-label L.tmp.59 (compare r8 6))
                                            (jump-if != L.__nested.55)
                                            (jump L.__nested.56)
                                            (with-label L.__nested.55 (set! r9 r9))
                                            (set! r9 (arithmetic-shift-right r9 3))
                                            (set! r9 r9)
                                            (set! r9 (* r9 8))
                                            (set! r9 r9)
                                            (set! r9 (+ r9 5))
                                            (mset! r14 r9 r13)
                                            (set! rax 30)
                                            (jump r15)
                                            (with-label L.__nested.56 (set! rax 2622))
                                            (jump r15)
                                            (with-label L.__nested.53 (compare r9 0))
                                            (jump-if >= L.tmp.57)
                                            (jump L.tmp.58)
                                            (with-label L.__nested.54 (set! rax 2622))
                                            (jump r15)
                                            (with-label L.vector-set!.9 (set! r15 r15))
                                            (set! r14 rdi)
                                            (set! r13 rsi)
                                            (set! r9 rdx)
                                            (set! r8 r13)
                                            (set! r8 (bitwise-and r8 7))
                                            (compare r8 0)
                                            (jump-if = L.tmp.70)
                                            (jump L.tmp.71)
                                            (with-label L.tmp.70 (set! r8 14))
                                            (jump L.tmp.72)
                                            (with-label L.tmp.71 (set! r8 6))
                                            (jump L.tmp.72)
                                            (with-label L.tmp.72 (compare r8 6))
                                            (jump-if != L.__nested.63)
                                            (jump L.__nested.64)
                                            (with-label L.tmp.67 (set! r8 14))
                                            (jump L.tmp.69)
                                            (with-label L.tmp.68 (set! r8 6))
                                            (jump L.tmp.69)
                                            (with-label L.tmp.69 (compare r8 6))
                                            (jump-if != L.__nested.65)
                                            (jump L.__nested.66)
                                            (with-label L.__nested.65 (set! rdx r9))
                                            (set! rsi r13)
                                            (set! rdi r14)
                                            (set! r15 r15)
                                            (jump L.unsafe-vector-set!.2)
                                            (with-label L.__nested.66 (set! rax 2622))
                                            (jump r15)
                                            (with-label L.__nested.63 (set! r8 r14))
                                            (set! r8 (bitwise-and r8 7))
                                            (compare r8 3)
                                            (jump-if = L.tmp.67)
                                            (jump L.tmp.68)
                                            (with-label L.__nested.64 (set! rax 2622))
                                            (jump r15)
                                            (with-label L.vector-init-loop.7 (set! r15 r15))
                                            (set! r14 rdi)
                                            (set! r13 rsi)
                                            (set! r9 rdx)
                                            (compare r14 r13)
                                            (jump-if = L.tmp.75)
                                            (jump L.tmp.76)
                                            (with-label L.tmp.75 (set! r8 14))
                                            (jump L.tmp.77)
                                            (with-label L.tmp.76 (set! r8 6))
                                            (jump L.tmp.77)
                                            (with-label L.tmp.77 (compare r8 6))
                                            (jump-if != L.__nested.73)
                                            (jump L.__nested.74)
                                            (with-label L.__nested.73 (set! rax r9))
                                            (jump r15)
                                            (with-label L.__nested.74 (set! r8 r13))
                                            (set! r8 (arithmetic-shift-right r8 3))
                                            (set! r8 r8)
                                            (set! r8 (* r8 8))
                                            (set! r8 r8)
                                            (set! r8 (+ r8 5))
                                            (mset! r9 r8 0)
                                            (set! r13 r13)
                                            (set! r13 (+ r13 8))
                                            (set! rdx r9)
                                            (set! rsi r13)
                                            (set! rdi r14)
                                            (set! r15 r15)
                                            (jump L.vector-init-loop.7)
                                            (with-label L.make-init-vector.1 (set! r15 r15))
                                            (set! r14 rdi)
                                            (compare r14 0)
                                            (jump-if >= L.tmp.80)
                                            (jump L.tmp.81)
                                            (with-label L.tmp.80 (set! r13 14))
                                            (jump L.tmp.82)
                                            (with-label L.tmp.81 (set! r13 6))
                                            (jump L.tmp.82)
                                            (with-label L.tmp.82 (compare r13 6))
                                            (jump-if != L.__nested.78)
                                            (jump L.__nested.79)
                                            (with-label L.__nested.78 (set! r9 r14))
                                            (set! r9 (arithmetic-shift-right r9 3))
                                            (set! r13 1)
                                            (set! r13 (+ r13 r9))
                                            (set! r9 r13)
                                            (set! r9 (* r9 8))
                                            (set! r13 r12)
                                            (set! r12 (+ r12 r9))
                                            (set! r13 r13)
                                            (set! r13 (+ r13 3))
                                            (mset! r13 -3 r14)
                                            (set! r13 r13)
                                            (set! rdx r13)
                                            (set! rsi 0)
                                            (set! rdi r14)
                                            (set! r15 r15)
                                            (jump L.vector-init-loop.7)
                                            (with-label L.__nested.79 (set! rax 3134))
                                            (jump r15)
                                            (with-label L.make-vector.8 (set! r15 r15))
                                            (set! r14 rdi)
                                            (set! r13 r14)
                                            (set! r13 (bitwise-and r13 7))
                                            (compare r13 0)
                                            (jump-if = L.tmp.85)
                                            (jump L.tmp.86)
                                            (with-label L.tmp.85 (set! r13 14))
                                            (jump L.tmp.87)
                                            (with-label L.tmp.86 (set! r13 6))
                                            (jump L.tmp.87)
                                            (with-label L.tmp.87 (compare r13 6))
                                            (jump-if != L.__nested.83)
                                            (jump L.__nested.84)
                                            (with-label L.__nested.83 (set! rdi r14))
                                            (set! r15 r15)
                                            (jump L.make-init-vector.1)
                                            (with-label L.__nested.84 (set! rax 2110))
                                            (jump r15)
                                            (with-label L.v.4 (set! r15 r15))
                                            (set! rdi 24)
                                            (set! r15 r15)
                                            (jump L.make-vector.8)
                                            (with-label L.set-first.5 (set! r15 r15))
                                            (set! r14 rdi)
                                            (set! rdx 336)
                                            (set! rsi 0)
                                            (set! rdi r14)
                                            (set! r15 r15)
                                            (jump L.vector-set!.9)
                                            (with-label L.get-first.6 (set! r15 r15))
                                            (set! r14 rdi)
                                            (set! rsi 0)
                                            (set! rdi r14)
                                            (set! r15 r15)
                                            (jump L.vector-ref.10)
                                            (with-label L.rp.13 (set! rbp (+ rbp 24)))
                                            (set! (rbp - 16) rax)
                                            (set! rbp (- rbp 24))
                                            (set! rdi (rbp - -8))
                                            (set! r15 L.rp.14)
                                            (jump L.set-first.5)
                                            (with-label L.rp.14 (set! rbp (+ rbp 24)))
                                            (set! r15 rax)
                                            (set! rbp (- rbp 24))
                                            (set! rdi r15)
                                            (set! r15 L.rp.15)
                                            (jump L.void?.11)
                                            (with-label L.rp.15 (set! rbp (+ rbp 24)))
                                            (set! r15 rax)
                                            (compare r15 6)
                                            (jump-if != L.tmp.17)
                                            (jump L.tmp.18)
                                            (with-label L.tmp.17 (set! (rbp - 8) 0))
                                            (jump L.tmp.19)
                                            (with-label L.tmp.18 (set! (rbp - 8) 318))
                                            (jump L.tmp.19)
                                            (with-label L.tmp.19 (set! rbp (- rbp 24)))
                                            (set! rdi (rbp - -8))
                                            (set! r15 L.rp.16)
                                            (jump L.get-first.6)
                                            (with-label L.rp.16 (set! rbp (+ rbp 24)))
                                            (set! r15 rax)
                                            (set! rsi r15)
                                            (set! rdi (rbp - 8))
                                            (set! r15 (rbp - 0))
                                            (jump L.+.12))))

  (check-equal? (interp-para-asm-lang-v8 (flatten-program '(module
                                                               (define L.__main.14
                                                                 (begin
                                                                   (set! r15 r15)
                                                                   (set! r13 rdi)
                                                                   (set! r14 rsi)
                                                                   (set! r9 10)
                                                                   (set! r9 (bitwise-and r9 7))
                                                                   (if (= r9 0) (jump L.tmp.11) (jump L.tmp.12))))
                                                             (define L.tmp.11 (begin (set! r9 14) (jump L.tmp.13)))
                                                             (define L.tmp.12 (begin (set! r9 6) (jump L.tmp.13)))
                                                             (define L.tmp.13 (if (!= r9 6) (jump L.__nested.4) (jump L.__nested.5)))
                                                             (define L.tmp.8 (begin (set! r9 14) (jump L.tmp.10)))
                                                             (define L.tmp.9 (begin (set! r9 6) (jump L.tmp.10)))
                                                             (define L.tmp.10 (if (!= r9 6) (jump L.__nested.6) (jump L.__nested.7)))
                                                             (define L.__nested.6
                                                               (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15)))
                                                             (define L.__nested.7 (begin (set! rax 574) (jump r15)))
                                                             (define L.__nested.4
                                                               (begin
                                                                 (set! r9 r13)
                                                                 (set! r9 (bitwise-and r9 7))
                                                                 (if (= r9 0) (jump L.tmp.8) (jump L.tmp.9))))
                                                             (define L.__nested.5 (begin (set! rax 574) (jump r15))))))
                (interp-para-asm-lang-v8 '(begin
                                            (with-label L.__main.14 (set! r15 r15))
                                            (set! r13 rdi)
                                            (set! r14 rsi)
                                            (set! r9 10)
                                            (set! r9 (bitwise-and r9 7))
                                            (compare r9 0)
                                            (jump-if = L.tmp.11)
                                            (jump L.tmp.12)
                                            (with-label L.tmp.11 (set! r9 14))
                                            (jump L.tmp.13)
                                            (with-label L.tmp.12 (set! r9 6))
                                            (jump L.tmp.13)
                                            (with-label L.tmp.13 (compare r9 6))
                                            (jump-if != L.__nested.4)
                                            (jump L.__nested.5)
                                            (with-label L.tmp.8 (set! r9 14))
                                            (jump L.tmp.10)
                                            (with-label L.tmp.9 (set! r9 6))
                                            (jump L.tmp.10)
                                            (with-label L.tmp.10 (compare r9 6))
                                            (jump-if != L.__nested.6)
                                            (jump L.__nested.7)
                                            (with-label L.__nested.6 (set! rax r13))
                                            (set! rax (+ rax r14))
                                            (jump r15)
                                            (with-label L.__nested.7 (set! rax 574))
                                            (jump r15)
                                            (with-label L.__nested.4 (set! r9 r13))
                                            (set! r9 (bitwise-and r9 7))
                                            (compare r9 0)
                                            (jump-if = L.tmp.8)
                                            (jump L.tmp.9)
                                            (with-label L.__nested.5 (set! rax 574))
                                            (jump r15)))))
