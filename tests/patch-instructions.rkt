#lang racket

(require
  cpsc411/langs/v8
  rackunit
  "../passes/patch-instructions.rkt")

(module+ test
  (check-equal? (patch-instructions '(begin
                                       (with-label L.tmp.1 (set! rax 10))
                                       (set! (rbp - 8) 2)
                                       (compare rax (rbp - 8))
                                       (jump-if != L.tmp.1)))
                '(begin
                   (with-label L.tmp.1 (set! rax 10))
                   (set! (rbp - 8) 2)
                   (set! r10 (rbp - 8))
                   (compare rax r10)
                   (jump-if != L.tmp.1)))
  (check-equal? (patch-instructions '(begin
                                       (set! (rbp - 0) 0)
                                       (set! (rbp - 8) 1)
                                       (set! r8 (rbp - 8))
                                       (set! r9 (rbp - 0))
                                       (compare r8 r9)
                                       (jump-if > L.foo.1)
                                       (jump done)
                                       (with-label L.foo.1 (jump done))))
                '(begin
                   (set! (rbp - 0) 0)
                   (set! (rbp - 8) 1)
                   (set! r8 (rbp - 8))
                   (set! r9 (rbp - 0))
                   (compare r8 r9)
                   (jump-if > L.foo.1)
                   (jump done)
                   (with-label L.foo.1 (jump done))))
  (check-equal? (patch-instructions
                 '(begin
                    (set! rsi L.label.1)
                    (with-label L.label.1
                      (set! rbx 18))
                    (jump done)))
                '(begin (set! rsi L.label.1) (with-label L.label.1 (set! rbx 18)) (jump done)))
  (check-equal? (patch-instructions '(begin
                                       (with-label L.tmp.99 (set! rbx r15))
                                       (set! rcx 10)
                                       (set! rsp 100)
                                       (compare rcx rsp)
                                       (jump-if != L.tmp.101)
                                       (jump L.tmp.100)
                                       (with-label L.tmp.101 (set! rdi 1000))
                                       (set! r15 rbx)
                                       (jump L.f.2)
                                       (with-label L.tmp.100 (set! rdi rcx))
                                       (set! r15 rbx)
                                       (jump L.f.1)
                                       (with-label L.f.1 (set! rsp r15))
                                       (set! rcx rdi)
                                       (set! rdx 1)
                                       (set! rbx 2)
                                       (set! rdx rdx)
                                       (set! rdx (bitwise-and rdx rcx))
                                       (set! rbx rbx)
                                       (set! rbx (bitwise-ior rbx rcx))
                                       (set! rdx (bitwise-xor rdx rbx))
                                       (set! rax rdx)
                                       (set! rax (arithmetic-shift-right rax 3))
                                       (jump rsp)))
                '(begin
                   (with-label L.tmp.99 (set! rbx r15))
                   (set! rcx 10)
                   (set! rsp 100)
                   (compare rcx rsp)
                   (jump-if != L.tmp.101)
                   (jump L.tmp.100)
                   (with-label L.tmp.101 (set! rdi 1000))
                   (set! r15 rbx)
                   (jump L.f.2)
                   (with-label L.tmp.100 (set! rdi rcx))
                   (set! r15 rbx)
                   (jump L.f.1)
                   (with-label L.f.1 (set! rsp r15))
                   (set! rcx rdi)
                   (set! rdx 1)
                   (set! rbx 2)
                   (set! rdx rdx)
                   (set! rdx (bitwise-and rdx rcx))
                   (set! rbx rbx)
                   (set! rbx (bitwise-ior rbx rcx))
                   (set! rdx (bitwise-xor rdx rbx))
                   (set! rax rdx)
                   (set! rax (arithmetic-shift-right rax 3))
                   (jump rsp)))
  (check-equal? (patch-instructions '(begin
                                       (with-label L.tmp.105 (set! rsp r15))
                                       (set! rdi 1)
                                       (set! rsi 2)
                                       (set! r15 rsp)
                                       (jump L.f.1)
                                       (with-label L.g.1 (set! rsp r15))
                                       (set! rax 8)
                                       (jump rsp)
                                       (with-label L.f.1 (set! (rbp - 24) r15))
                                       (set! (rbp - 8) rdi)
                                       (set! (rbp - 0) rsi)
                                       (set! rsp 10)
                                       (set! rsp (+ rsp 6))
                                       (set! (rbp - 16) r12)
                                       (set! r12 (+ r12 rsp))
                                       (set! rbp (- rbp 32))
                                       (set! r15 L.rp.21)
                                       (jump L.g.1)
                                       (with-label L.rp.21 (set! rbp (+ rbp 32)))
                                       (set! rsp rax)
                                       (jump L.tmp.103)
                                       (with-label L.tmp.102 (set! rbx 10))
                                       (set! rbx (+ rbx 6))
                                       (set! rsp r12)
                                       (set! r12 (+ r12 rbx))
                                       (set! rbx 8)
                                       (set! rbx (bitwise-and rbx 8))
                                       (set! rax (mref rsp rbx))
                                       (jump (rbp - 24))
                                       (with-label L.tmp.104 (mset! (rbp - 16) rsp (rbp - 0)))
                                       (jump L.tmp.102)
                                       (with-label L.tmp.103 (mset! (rbp - 16) rsp (rbp - 8)))
                                       (jump L.tmp.102)))
                '(begin
                   (with-label L.tmp.105 (set! rsp r15))
                   (set! rdi 1)
                   (set! rsi 2)
                   (set! r15 rsp)
                   (jump L.f.1)
                   (with-label L.g.1 (set! rsp r15))
                   (set! rax 8)
                   (jump rsp)
                   (with-label L.f.1 (set! (rbp - 24) r15))
                   (set! (rbp - 8) rdi)
                   (set! (rbp - 0) rsi)
                   (set! rsp 10)
                   (set! rsp (+ rsp 6))
                   (set! (rbp - 16) r12)
                   (set! r12 (+ r12 rsp))
                   (set! rbp (- rbp 32))
                   (set! r15 L.rp.21)
                   (jump L.g.1)
                   (with-label L.rp.21 (set! rbp (+ rbp 32)))
                   (set! rsp rax)
                   (jump L.tmp.103)
                   (with-label L.tmp.102 (set! rbx 10))
                   (set! rbx (+ rbx 6))
                   (set! rsp r12)
                   (set! r12 (+ r12 rbx))
                   (set! rbx 8)
                   (set! rbx (bitwise-and rbx 8))
                   (set! rax (mref rsp rbx))
                   (set! r10 (rbp - 24))
                   (jump r10)
                   (with-label L.tmp.104 (set! r10 (rbp - 0)))
                   (set! r11 (rbp - 16))
                   (mset! r11 rsp r10)
                   (jump L.tmp.102)
                   (with-label L.tmp.103 (set! r10 (rbp - 8)))
                   (set! r11 (rbp - 16))
                   (mset! r11 rsp r10)
                   (jump L.tmp.102)))

  (check-equal? (interp-paren-x64-mops-v8 (patch-instructions '(begin
                                                                 (with-label L.__main.14 (set! r15 r15))
                                                                 (set! r13 rdi)
                                                                 (set! r14 rsi)
                                                                 (set! r9 r14)
                                                                 (set! r9 10)
                                                                 (set! r9 (bitwise-and r9 7))
                                                                 (compare r9 0)
                                                                 (jump-if = L.tmp.11)
                                                                 (jump L.tmp.12)
                                                                 (with-label L.tmp.11 (set! r9 14))
                                                                 (jump L.tmp.13)
                                                                 (with-label L.tmp.12 (set! r9 6))
                                                                 (jump L.tmp.13)
                                                                 (with-label L.tmp.13 (compare r9 6))
                                                                 (jump-if != L.__nested.4)
                                                                 (jump L.__nested.5)
                                                                 (with-label L.tmp.8 (set! r9 14))
                                                                 (jump L.tmp.10)
                                                                 (with-label L.tmp.9 (set! r9 6))
                                                                 (jump L.tmp.10)
                                                                 (with-label L.tmp.10 (compare r9 6))
                                                                 (jump-if != L.__nested.6)
                                                                 (jump L.__nested.7)
                                                                 (with-label L.__nested.6 (set! rax r13))
                                                                 (set! rax (+ rax r14))
                                                                 (jump r15)
                                                                 (with-label L.__nested.7 (set! rax 574))
                                                                 (jump r15)
                                                                 (with-label L.__nested.4 (set! r9 r13))
                                                                 (set! r9 (bitwise-and r9 7))
                                                                 (compare r9 0)
                                                                 (jump-if = L.tmp.8)
                                                                 (jump L.tmp.9)
                                                                 (with-label L.__nested.5 (set! rax 574))
                                                                 (jump r15))))
                (interp-paren-x64-mops-v8 '(begin
                                             (with-label L.__main.14 (set! r15 r15))
                                             (set! r13 rdi)
                                             (set! r14 rsi)
                                             (set! r9 r14)
                                             (set! r9 10)
                                             (set! r9 (bitwise-and r9 7))
                                             (compare r9 0)
                                             (jump-if = L.tmp.11)
                                             (jump L.tmp.12)
                                             (with-label L.tmp.11 (set! r9 14))
                                             (jump L.tmp.13)
                                             (with-label L.tmp.12 (set! r9 6))
                                             (jump L.tmp.13)
                                             (with-label L.tmp.13 (compare r9 6))
                                             (jump-if != L.__nested.4)
                                             (jump L.__nested.5)
                                             (with-label L.tmp.8 (set! r9 14))
                                             (jump L.tmp.10)
                                             (with-label L.tmp.9 (set! r9 6))
                                             (jump L.tmp.10)
                                             (with-label L.tmp.10 (compare r9 6))
                                             (jump-if != L.__nested.6)
                                             (jump L.__nested.7)
                                             (with-label L.__nested.6 (set! rax r13))
                                             (set! rax (+ rax r14))
                                             (jump r15)
                                             (with-label L.__nested.7 (set! rax 574))
                                             (jump r15)
                                             (with-label L.__nested.4 (set! r9 r13))
                                             (set! r9 (bitwise-and r9 7))
                                             (compare r9 0)
                                             (jump-if = L.tmp.8)
                                             (jump L.tmp.9)
                                             (with-label L.__nested.5 (set! rax 574))
                                             (jump r15)))))
