#lang racket

(require
  cpsc411/langs/v8
  rackunit
  "../passes/patch-instructions.rkt")

(module+ test
  (check-equal? (patch-instructions '(begin
                                       (set! rax (mref rsp rbp))))
                '(begin (set! rax (mref rsp rbp))))
  (check-equal? (patch-instructions '(begin
                                       (set! (rbp - 8) (mref rsp 1))))
                '(begin
                   (set! r10 (mref rsp 1))
                   (set! (rbp - 8) r10)))
  (check-equal? (patch-instructions '(begin
                                       (set! (rbp - 8) (mref rsp rbp))))
                '(begin (set! r10 (mref rsp rbp)) (set! (rbp - 8) r10)))
  (check-equal? (patch-instructions '(begin
                                       (set! rax (mref (rbp - 8) 10))))
                '(begin
                   (set! r10 (rbp - 8))
                   (set! rax (mref r10 10))))
  (check-equal? (patch-instructions '(begin
                                       (set! rax (mref rsp (rbp - 8)))))
                '(begin
                   (set! r10 (rbp - 8))
                   (set! rax (mref rsp r10))))
  (check-equal? (patch-instructions '(begin
                                       (set! (rbp - 8) (mref (rbp - 16) 10))))
                '(begin
                   (set! r10 (rbp - 16))
                   (set! r10 (mref r10 10))
                   (set! (rbp - 8) r10)))
  (check-equal? (patch-instructions '(begin
                                       (set! (rbp - 8) (mref rsp (rbp - 16)))))
                '(begin
                   (set! r10 (rbp - 16))
                   (set! r10 (mref rsp r10))
                   (set! (rbp - 8) r10)))
  (check-equal? (patch-instructions '(begin
                                       (set! (rbp - 8) (mref (rbp - 16) (rbp - 24)))))
                '(begin
                   (set! r10 (rbp - 16))
                   (set! r11 (rbp - 24))
                   (set! r10 (mref r10 r11))
                   (set! (rbp - 8) r10)))
  (check-equal? (patch-instructions '(begin
                                       (with-label L.tmp.1 (set! rax 10))
                                       (set! (rbp - 8) 2)
                                       (compare rax (rbp - 8))
                                       (jump-if != L.tmp.1)))
                '(begin
                   (with-label L.tmp.1 (set! rax 10))
                   (set! (rbp - 8) 2)
                   (set! r10 (rbp - 8))
                   (compare rax r10)
                   (jump-if != L.tmp.1)))
  (check-equal? (patch-instructions '(begin
                                       (set! (rbp - 0) 0)
                                       (set! (rbp - 8) 1)
                                       (set! r8 (rbp - 8))
                                       (set! r9 (rbp - 0))
                                       (compare r8 r9)
                                       (jump-if > L.foo.1)
                                       (jump done)
                                       (with-label L.foo.1 (jump done))))
                '(begin
                   (set! (rbp - 0) 0)
                   (set! (rbp - 8) 1)
                   (set! r8 (rbp - 8))
                   (set! r9 (rbp - 0))
                   (compare r8 r9)
                   (jump-if > L.foo.1)
                   (jump done)
                   (with-label L.foo.1 (jump done))))
  (check-equal? (patch-instructions
                 '(begin
                    (set! rsi L.label.1)
                    (with-label L.label.1
                      (set! rbx 18))
                    (jump done)))
                '(begin (set! rsi L.label.1) (with-label L.label.1 (set! rbx 18)) (jump done)))
  (check-equal? (patch-instructions '(begin
                                       (with-label L.tmp.99 (set! rbx r15))
                                       (set! rcx 10)
                                       (set! rsp 100)
                                       (compare rcx rsp)
                                       (jump-if != L.tmp.101)
                                       (jump L.tmp.100)
                                       (with-label L.tmp.101 (set! rdi 1000))
                                       (set! r15 rbx)
                                       (jump L.f.2)
                                       (with-label L.tmp.100 (set! rdi rcx))
                                       (set! r15 rbx)
                                       (jump L.f.1)
                                       (with-label L.f.1 (set! rsp r15))
                                       (set! rcx rdi)
                                       (set! rdx 1)
                                       (set! rbx 2)
                                       (set! rdx rdx)
                                       (set! rdx (bitwise-and rdx rcx))
                                       (set! rbx rbx)
                                       (set! rbx (bitwise-ior rbx rcx))
                                       (set! rdx (bitwise-xor rdx rbx))
                                       (set! rax rdx)
                                       (set! rax (arithmetic-shift-right rax 3))
                                       (jump rsp)))
                '(begin
                   (with-label L.tmp.99 (set! rbx r15))
                   (set! rcx 10)
                   (set! rsp 100)
                   (compare rcx rsp)
                   (jump-if != L.tmp.101)
                   (jump L.tmp.100)
                   (with-label L.tmp.101 (set! rdi 1000))
                   (set! r15 rbx)
                   (jump L.f.2)
                   (with-label L.tmp.100 (set! rdi rcx))
                   (set! r15 rbx)
                   (jump L.f.1)
                   (with-label L.f.1 (set! rsp r15))
                   (set! rcx rdi)
                   (set! rdx 1)
                   (set! rbx 2)
                   (set! rdx rdx)
                   (set! rdx (bitwise-and rdx rcx))
                   (set! rbx rbx)
                   (set! rbx (bitwise-ior rbx rcx))
                   (set! rdx (bitwise-xor rdx rbx))
                   (set! rax rdx)
                   (set! rax (arithmetic-shift-right rax 3))
                   (jump rsp)))
  (check-equal? (patch-instructions '(begin
                                       (with-label L.tmp.105 (set! rsp r15))
                                       (set! rdi 1)
                                       (set! rsi 2)
                                       (set! r15 rsp)
                                       (jump L.f.1)
                                       (with-label L.g.1 (set! rsp r15))
                                       (set! rax 8)
                                       (jump rsp)
                                       (with-label L.f.1 (set! (rbp - 24) r15))
                                       (set! (rbp - 8) rdi)
                                       (set! (rbp - 0) rsi)
                                       (set! rsp 10)
                                       (set! rsp (+ rsp 6))
                                       (set! (rbp - 16) r12)
                                       (set! r12 (+ r12 rsp))
                                       (set! rbp (- rbp 32))
                                       (set! r15 L.rp.21)
                                       (jump L.g.1)
                                       (with-label L.rp.21 (set! rbp (+ rbp 32)))
                                       (set! rsp rax)
                                       (jump L.tmp.103)
                                       (with-label L.tmp.102 (set! rbx 10))
                                       (set! rbx (+ rbx 6))
                                       (set! rsp r12)
                                       (set! r12 (+ r12 rbx))
                                       (set! rbx 8)
                                       (set! rbx (bitwise-and rbx 8))
                                       (set! rax (mref rsp rbx))
                                       (jump (rbp - 24))
                                       (with-label L.tmp.104 (mset! (rbp - 16) rsp (rbp - 0)))
                                       (jump L.tmp.102)
                                       (with-label L.tmp.103 (mset! (rbp - 16) rsp (rbp - 8)))
                                       (jump L.tmp.102)))
                '(begin
                   (with-label L.tmp.105 (set! rsp r15))
                   (set! rdi 1)
                   (set! rsi 2)
                   (set! r15 rsp)
                   (jump L.f.1)
                   (with-label L.g.1 (set! rsp r15))
                   (set! rax 8)
                   (jump rsp)
                   (with-label L.f.1 (set! (rbp - 24) r15))
                   (set! (rbp - 8) rdi)
                   (set! (rbp - 0) rsi)
                   (set! rsp 10)
                   (set! rsp (+ rsp 6))
                   (set! (rbp - 16) r12)
                   (set! r12 (+ r12 rsp))
                   (set! rbp (- rbp 32))
                   (set! r15 L.rp.21)
                   (jump L.g.1)
                   (with-label L.rp.21 (set! rbp (+ rbp 32)))
                   (set! rsp rax)
                   (jump L.tmp.103)
                   (with-label L.tmp.102 (set! rbx 10))
                   (set! rbx (+ rbx 6))
                   (set! rsp r12)
                   (set! r12 (+ r12 rbx))
                   (set! rbx 8)
                   (set! rbx (bitwise-and rbx 8))
                   (set! rax (mref rsp rbx))
                   (set! r10 (rbp - 24))
                   (jump r10)
                   (with-label L.tmp.104 (set! r10 (rbp - 0)))
                   (set! r11 (rbp - 16))
                   (mset! r11 rsp r10)
                   (jump L.tmp.102)
                   (with-label L.tmp.103 (set! r10 (rbp - 8)))
                   (set! r11 (rbp - 16))
                   (mset! r11 rsp r10)
                   (jump L.tmp.102)))

  (check-equal? (interp-paren-x64-mops-v8 (patch-instructions '(begin
                                                                 (with-label L.__main.14 (set! r15 r15))
                                                                 (set! r13 rdi)
                                                                 (set! r14 rsi)
                                                                 (set! r9 r14)
                                                                 (set! r9 10)
                                                                 (set! r9 (bitwise-and r9 7))
                                                                 (compare r9 0)
                                                                 (jump-if = L.tmp.11)
                                                                 (jump L.tmp.12)
                                                                 (with-label L.tmp.11 (set! r9 14))
                                                                 (jump L.tmp.13)
                                                                 (with-label L.tmp.12 (set! r9 6))
                                                                 (jump L.tmp.13)
                                                                 (with-label L.tmp.13 (compare r9 6))
                                                                 (jump-if != L.__nested.4)
                                                                 (jump L.__nested.5)
                                                                 (with-label L.tmp.8 (set! r9 14))
                                                                 (jump L.tmp.10)
                                                                 (with-label L.tmp.9 (set! r9 6))
                                                                 (jump L.tmp.10)
                                                                 (with-label L.tmp.10 (compare r9 6))
                                                                 (jump-if != L.__nested.6)
                                                                 (jump L.__nested.7)
                                                                 (with-label L.__nested.6 (set! rax r13))
                                                                 (set! rax (+ rax r14))
                                                                 (jump r15)
                                                                 (with-label L.__nested.7 (set! rax 574))
                                                                 (jump r15)
                                                                 (with-label L.__nested.4 (set! r9 r13))
                                                                 (set! r9 (bitwise-and r9 7))
                                                                 (compare r9 0)
                                                                 (jump-if = L.tmp.8)
                                                                 (jump L.tmp.9)
                                                                 (with-label L.__nested.5 (set! rax 574))
                                                                 (jump r15))))
                (interp-paren-x64-mops-v8 '(begin
                                             (with-label L.__main.14 (set! r15 r15))
                                             (set! r13 rdi)
                                             (set! r14 rsi)
                                             (set! r9 r14)
                                             (set! r9 10)
                                             (set! r9 (bitwise-and r9 7))
                                             (compare r9 0)
                                             (jump-if = L.tmp.11)
                                             (jump L.tmp.12)
                                             (with-label L.tmp.11 (set! r9 14))
                                             (jump L.tmp.13)
                                             (with-label L.tmp.12 (set! r9 6))
                                             (jump L.tmp.13)
                                             (with-label L.tmp.13 (compare r9 6))
                                             (jump-if != L.__nested.4)
                                             (jump L.__nested.5)
                                             (with-label L.tmp.8 (set! r9 14))
                                             (jump L.tmp.10)
                                             (with-label L.tmp.9 (set! r9 6))
                                             (jump L.tmp.10)
                                             (with-label L.tmp.10 (compare r9 6))
                                             (jump-if != L.__nested.6)
                                             (jump L.__nested.7)
                                             (with-label L.__nested.6 (set! rax r13))
                                             (set! rax (+ rax r14))
                                             (jump r15)
                                             (with-label L.__nested.7 (set! rax 574))
                                             (jump r15)
                                             (with-label L.__nested.4 (set! r9 r13))
                                             (set! r9 (bitwise-and r9 7))
                                             (compare r9 0)
                                             (jump-if = L.tmp.8)
                                             (jump L.tmp.9)
                                             (with-label L.__nested.5 (set! rax 574))
                                             (jump r15))))
  (check-equal?
   (patch-instructions '(begin (jump L.tmp.10)))
   '(begin (jump L.tmp.10))
   "Basic jump test")
  (check-equal?
   (patch-instructions '(begin (jump (rbp - 8))))
   '(begin (set! r10 (rbp - 8)) (jump r10))
   "Basic jump addr")
  (check-equal?
   (patch-instructions '(begin (compare (rbp - 8) 1)))
   '(begin (set! r10 (rbp - 8)) (compare r10 1))
   "Basic compare addr")
  (check-equal?
   (patch-instructions '(begin (mset! (rbp - 8) 1 1)))
   '(begin (set! r10 (rbp - 8)) (mset! r10 1 1))
   "Basic mset addr (patch-instructions '(begin (mset! (rbp - 8) 1 1)))")
  (check-equal?
   (patch-instructions '(begin (mset! (rbp - 8) 1 (rbp - 16))))
   '(begin (set! r10 (rbp - 16)) (set! r11 (rbp - 8)) (mset! r11 1 r10))
   "Basic mset addr int addr")
  (check-equal?
   (patch-instructions '(begin (mset! rax 1 (rbp - 16))))
   '(begin (set! r10 (rbp - 16)) (mset! rax 1 r10))
   "mset reg index addr")
  (check-equal?
   (patch-instructions '(begin (mset! rax (rbp - 8) (rbp - 16))))
   '(begin (set! r10 (rbp - 16)) (set! r11 (rbp - 8)) (mset! rax r11 r10))
   "mset reg index addr")
  (check-equal?
   (patch-instructions '(begin (mset! (rbp - 24) (rbp - 8) (rbp - 16))))
   '(begin
      (set! r10 (rbp - 24))
      (set! r11 (rbp - 8))
      (set! r10 (+ r10 r11))
      (set! r11 (rbp - 16))
      (mset! r10 0 r11))
   "mset! all addr")
  (check-equal?
   (patch-instructions '(begin (mset! (rbp - 24) (rbp - 8) 1)))
   '(begin (set! r10 (rbp - 24)) (set! r11 (rbp - 8)) (mset! r10 r11 1))
   "mset addr addr int")
  (check-equal?
   (patch-instructions '(begin (mset! (rbp - 24) (rbp - 8) L.tmp.1)))
   '(begin
      (set! r10 (rbp - 24))
      (set! r11 (rbp - 8))
      (set! r10 (+ r10 r11))
      (set! r11 L.tmp.1)
      (mset! r10 0 r11))
   "mset addr addr label")
  (check-equal?
   (patch-instructions '(begin (mset! (rbp - 24) -2 L.tmp.1)))
   '(begin (set! r10 L.tmp.1) (set! r11 (rbp - 24)) (mset! r11 -2 r10))
   "mset addr int label")
  (check-equal?
   (patch-instructions '(begin (mset! rbp -2 L.tmp.1)))
   '(begin (set! r10 L.tmp.1) (mset! rbp -2 r10))
   "mset reg int label")
  (check-equal?
   (patch-instructions '(begin (mset! rbp (rbp - 8) L.tmp.1)))
   '(begin (set! r10 L.tmp.1) (set! r11 (rbp - 8)) (mset! rbp r11 r10))
   "mset reg addr label")
  (check-equal?
   (patch-instructions '(begin (mset! rbp rax L.tmp.1)))
   '(begin (set! r10 L.tmp.1) (mset! rbp rax r10))
   "mset reg reg label")
  (check-equal?
   (patch-instructions '(begin (mset! (rbp - 8) rax L.tmp.1)))
   '(begin (set! r10 L.tmp.1) (set! r11 (rbp - 8)) (mset! r11 rax r10))
   "mset addr reg label")
  (check-equal?
   (patch-instructions '(begin (mset! (rbp - 8) (rbp - 16) L.tmp.1)))
   '(begin
      (set! r10 (rbp - 8))
      (set! r11 (rbp - 16))
      (set! r10 (+ r10 r11))
      (set! r11 L.tmp.1)
      (mset! r10 0 r11))
   "mset addr addr label")
  (check-equal?
   (patch-instructions '(begin (set! rax (mref rsi (rbp - 16)))))
   '(begin (set! r10 (rbp - 16)) (set! rax (mref rsi r10)))
   "mref reg reg addr")
  (check-equal?
   (patch-instructions '(begin (set! (rbp - 8) (mref rsi (rbp - 16)))))
   '(begin (set! r10 (rbp - 16)) (set! r10 (mref rsi r10)) (set! (rbp - 8) r10))
   "mref addr reg addr")
  (check-equal?
   (patch-instructions '(begin (set! (rbp - 8) (mref (rbp - 24) (rbp - 16)))))
   '(begin
      (set! r10 (rbp - 24))
      (set! r11 (rbp - 16))
      (set! r10 (mref r10 r11))
      (set! (rbp - 8) r10))
   "mref addr addr addr")
  (check-equal?
   (patch-instructions '(begin (set! rax (mref (rbp - 8) (rbp - 16)))))
   '(begin (set! r10 (rbp - 8)) (set! r11 (rbp - 16)) (set! rax (mref r10 r11)))
   "mref addr addr")
  (check-equal?
   (patch-instructions '(begin (mset! (rbp - 8) 1 1)))
   '(begin (set! r10 (rbp - 8)) (mset! r10 1 1))
   "mset addr int int")
  (check-equal?
   (patch-instructions '(begin (mset! (rbp - 8) (rbp - 16) 1)))
   '(begin (set! r10 (rbp - 8)) (set! r11 (rbp - 16)) (mset! r10 r11 1))
   "addr addr int")
  (check-equal?
   (patch-instructions '(begin (mset! (rbp - 8) (rbp - 16) rax)))
   '(begin (set! r10 (rbp - 8)) (set! r11 (rbp - 16)) (mset! r10 r11 rax))
   "addr addr reg")
  (check-equal?
   (patch-instructions '(begin (mset! rsi (rbp - 16) rax)))
   '(begin (set! r10 (rbp - 16)) (mset! rsi r10 rax))
   "reg addr reg")
  (check-equal?
   (patch-instructions '(begin
                          (with-label L.tmp.487
                            (set! (rbp - 8) r15))
                          (set! rsp r12)
                          (set! r12
                                (+ r12 16))
                          (set! rsp rsp)
                          (set! rsp (+ rsp 2))
                          (mset! rsp -2 L.tmp.58)
                          (mset! rsp 6 16)
                          (set! (rbp - 0) rsp)
                          (set! (rbp - 16) (mref (rbp - 0) -2))
                          (set! (rbp - 24) (mref (rbp - 0) -2))
                          (set! rsp (mref (rbp - 0) -2))
                          (set! rbp (- rbp 32))
                          (set! rdi (rbp - -32))
                          (set! rsi 24)
                          (set! rdx 22)
                          (set! r15 L.rp.108)
                          (jump rsp)
                          (with-label L.rp.108
                            (set! rbp (+ rbp 32)))
                          (set! rsp rax)
                          (set! rbp (- rbp 32))
                          (set! rdi (rbp - -32))
                          (set! rsi 16)
                          (set! rdx rsp)
                          (set! r15 L.rp.109)
                          (jump (rbp - -8))
                          (with-label L.rp.109
                            (set! rbp (+ rbp 32)))
                          (set! rsp rax)
                          (set! rdi (rbp - 0))
                          (set! rsi 8)
                          (set! rdx rsp)
                          (set! r15 (rbp - 8))
                          (jump (rbp - 16))
                          (with-label L.tmp.58
                            (set! rbx r15))
                          (set! rsp rdi)
                          (set! rcx rsi)
                          (set! rsp rdx)
                          (set! rdx r12)
                          (set! r12 (+ r12 16))
                          (set! rdx rdx)
                          (set! rdx (+ rdx 1))
                          (mset! rdx -1 rcx)
                          (mset! rdx 7 rsp)
                          (set! rax rdx)
                          (jump rbx)))
   '(begin
      (with-label L.tmp.487 (set! (rbp - 8) r15))
      (set! rsp r12)
      (set! r12 (+ r12 16))
      (set! rsp rsp)
      (set! rsp (+ rsp 2))
      (set! r10 L.tmp.58)
      (mset! rsp -2 r10)
      (mset! rsp 6 16)
      (set! (rbp - 0) rsp)
      (set! r10 (rbp - 0))
      (set! r10 (mref r10 -2))
      (set! (rbp - 16) r10)
      (set! r10 (rbp - 0))
      (set! r10 (mref r10 -2))
      (set! (rbp - 24) r10)
      (set! r10 (rbp - 0))
      (set! rsp (mref r10 -2))
      (set! rbp (- rbp 32))
      (set! rdi (rbp - -32))
      (set! rsi 24)
      (set! rdx 22)
      (set! r15 L.rp.108)
      (jump rsp)
      (with-label L.rp.108 (set! rbp (+ rbp 32)))
      (set! rsp rax)
      (set! rbp (- rbp 32))
      (set! rdi (rbp - -32))
      (set! rsi 16)
      (set! rdx rsp)
      (set! r15 L.rp.109)
      (set! r10 (rbp - -8))
      (jump r10)
      (with-label L.rp.109 (set! rbp (+ rbp 32)))
      (set! rsp rax)
      (set! rdi (rbp - 0))
      (set! rsi 8)
      (set! rdx rsp)
      (set! r15 (rbp - 8))
      (set! r10 (rbp - 16))
      (jump r10)
      (with-label L.tmp.58 (set! rbx r15))
      (set! rsp rdi)
      (set! rcx rsi)
      (set! rsp rdx)
      (set! rdx r12)
      (set! r12 (+ r12 16))
      (set! rdx rdx)
      (set! rdx (+ rdx 1))
      (mset! rdx -1 rcx)
      (mset! rdx 7 rsp)
      (set! rax rdx)
      (jump rbx))
   "long test")
  (check-equal?
   (patch-instructions '(begin
                          (with-label L.tmp.488
                            (set! rbx 16))
                          (set! rsp r12)
                          (set! r12 (+ r12 rbx))
                          (mset! rsp 0 2147483648)
                          (mset! rsp 8 8)
                          (set! rbx (mref rsp 0))
                          (set! rcx 8)
                          (set! rsp (mref rsp rcx))
                          (set! rax rbx)
                          (set! rax (+ rax rsp))
                          (jump r15)))
   '(begin
      (with-label L.tmp.488 (set! rbx 16))
      (set! rsp r12)
      (set! r12 (+ r12 rbx))
      (set! r10 2147483648)
      (mset! rsp 0 r10)
      (mset! rsp 8 8)
      (set! rbx (mref rsp 0))
      (set! rcx 8)
      (set! rsp (mref rsp rcx))
      (set! rax rbx)
      (set! rax (+ rax rsp))
      (jump r15))
   "not int32 in triv pos reg")
  (check-equal?
   (patch-instructions '(begin (mset! (rbp - 16) 0 2147483648)))
   '(begin (set! r10 2147483648) (set! r11 (rbp - 16)) (mset! r11 0 r10))
   "not int32 triv pos addr")
  )
